package f32add

fn __std__mask_bits__8() -> bits[8] {
  literal.2: bits[8] = literal(value=0, id=2, pos=0,365,11)
  X: bits[32] = literal(value=8, id=1, pos=0,364,17)
  ret not.3: bits[8] = not(literal.2, id=3, pos=0,365,2)
}

fn __apfloat__is_inf__8_23(x: (bits[1], bits[8], bits[23])) -> bits[1] {
  x_bexp: bits[8] = tuple_index(x, index=1, id=7, pos=0,446,4)
  invoke.8: bits[8] = invoke(to_apply=__std__mask_bits__8, id=8, pos=0,446,27)
  x_fraction: bits[23] = tuple_index(x, index=2, id=10, pos=0,446,42)
  literal.11: bits[23] = literal(value=0, id=11, pos=0,446,73)
  eq.9: bits[1] = eq(x_bexp, invoke.8, id=9, pos=0,446,10)
  eq.12: bits[1] = eq(x_fraction, literal.11, id=12, pos=0,446,52)
  EXP_SZ: bits[32] = literal(value=8, id=5, pos=0,445,14)
  FRACTION_SZ: bits[32] = literal(value=23, id=6, pos=0,445,26)
  ret and.13: bits[1] = and(eq.9, eq.12, id=13, pos=0,446,38)
}

fn __apfloat__is_nan__8_23(x: (bits[1], bits[8], bits[23])) -> bits[1] {
  x_bexp: bits[8] = tuple_index(x, index=1, id=17, pos=0,451,4)
  invoke.18: bits[8] = invoke(to_apply=__std__mask_bits__8, id=18, pos=0,451,27)
  x_fraction: bits[23] = tuple_index(x, index=2, id=20, pos=0,451,42)
  literal.21: bits[23] = literal(value=0, id=21, pos=0,451,73)
  eq.19: bits[1] = eq(x_bexp, invoke.18, id=19, pos=0,451,10)
  ne.22: bits[1] = ne(x_fraction, literal.21, id=22, pos=0,451,52)
  EXP_SZ: bits[32] = literal(value=8, id=15, pos=0,450,14)
  FRACTION_SZ: bits[32] = literal(value=23, id=16, pos=0,450,26)
  ret and.23: bits[1] = and(eq.19, ne.22, id=23, pos=0,451,38)
}

fn __itok__xls_modules_apfloat_add_2__add__10_29_8_23_27_9_28(__token: token, __activated: bits[1], x: (bits[1], bits[8], bits[23]), y: (bits[1], bits[8], bits[23])) -> (token, (bits[1], bits[8], bits[23])) {
  FRACTION_SZ: bits[32] = literal(value=23, id=29, pos=0,44,24)
  bit_slice.36: bits[23] = bit_slice(FRACTION_SZ, start=0, width=23, id=36)
  literal.37: bits[23] = literal(value=1, id=37, pos=0,56,97)
  literal.35: bits[23] = literal(value=1, id=35, pos=0,56,42)
  sub.38: bits[23] = sub(bit_slice.36, literal.37, id=38, pos=0,56,79)
  x_bexp__1: bits[8] = tuple_index(x, index=1, id=63, pos=0,66,24)
  y_bexp__1: bits[8] = tuple_index(y, index=1, id=64, pos=0,66,33)
  fraction_high_bit: bits[23] = shll(literal.35, sub.38, id=39, pos=0,56,44)
  ugt.65: bits[1] = ugt(x_bexp__1, y_bexp__1, id=65, pos=0,66,30)
  x_fraction: bits[23] = tuple_index(x, index=2, id=43, pos=0,58,18)
  zero_ext.40: bits[28] = zero_ext(fraction_high_bit, new_bit_count=28, id=40)
  literal.41: bits[28] = literal(value=1, id=41, pos=0,57,91)
  greater_exp: (bits[1], bits[8], bits[23]) = sel(ugt.65, cases=[y, x], id=66, pos=0,66,20)
  y_fraction: bits[23] = tuple_index(y, index=2, id=48, pos=0,59,18)
  zero_ext.44: bits[28] = zero_ext(x_fraction, new_bit_count=28, id=44)
  wide_fraction_high_bit: bits[28] = shll(zero_ext.40, literal.41, id=42, pos=0,57,70)
  WIDE_FRACTION: bits[32] = literal(value=28, id=32, pos=0,47,4)
  greater_exp_bexp: bits[8] = tuple_index(greater_exp, index=1, id=67, pos=0,67,27)
  x_bexp__2: bits[8] = tuple_index(x, index=1, id=68, pos=0,67,36)
  zero_ext.49: bits[28] = zero_ext(y_fraction, new_bit_count=28, id=49)
  greater_exp_bexp__1: bits[8] = tuple_index(greater_exp, index=1, id=70, pos=0,68,27)
  y_bexp__2: bits[8] = tuple_index(y, index=1, id=71, pos=0,68,36)
  x_bexp: bits[8] = tuple_index(x, index=1, id=53, pos=0,62,19)
  literal.54: bits[8] = literal(value=0, id=54, pos=0,62,39)
  or.45: bits[28] = or(zero_ext.44, wide_fraction_high_bit, id=45, pos=0,58,50)
  literal.46: bits[28] = literal(value=3, id=46, pos=0,58,97)
  bit_slice.79: bits[8] = bit_slice(WIDE_FRACTION, start=0, width=8, id=79)
  shift_x: bits[8] = sub(greater_exp_bexp, x_bexp__2, id=69, pos=0,67,33)
  y_bexp: bits[8] = tuple_index(y, index=1, id=58, pos=0,63,19)
  literal.59: bits[8] = literal(value=0, id=59, pos=0,63,39)
  or.50: bits[28] = or(zero_ext.49, wide_fraction_high_bit, id=50, pos=0,59,50)
  literal.51: bits[28] = literal(value=3, id=51, pos=0,59,97)
  bit_slice.83: bits[8] = bit_slice(WIDE_FRACTION, start=0, width=8, id=83)
  shift_y: bits[8] = sub(greater_exp_bexp__1, y_bexp__2, id=72, pos=0,68,33)
  eq.55: bits[1] = eq(x_bexp, literal.54, id=55, pos=0,62,25)
  wide_x: bits[28] = shll(or.45, literal.46, id=47, pos=0,58,76)
  literal.56: bits[28] = literal(value=0, id=56, pos=0,62,61)
  sub.80: bits[8] = sub(bit_slice.79, shift_x, id=80, pos=0,74,58)
  eq.60: bits[1] = eq(y_bexp, literal.59, id=60, pos=0,63,25)
  wide_y: bits[28] = shll(or.50, literal.51, id=52, pos=0,59,76)
  literal.61: bits[28] = literal(value=0, id=61, pos=0,63,61)
  sub.84: bits[8] = sub(bit_slice.83, shift_y, id=84, pos=0,75,58)
  wide_x__1: bits[28] = sel(eq.55, cases=[wide_x, literal.56], id=57, pos=0,62,15)
  zero_ext.81: bits[28] = zero_ext(sub.80, new_bit_count=28, id=81)
  wide_y__1: bits[28] = sel(eq.60, cases=[wide_y, literal.61], id=62, pos=0,63,15)
  zero_ext.85: bits[28] = zero_ext(sub.84, new_bit_count=28, id=85)
  zero_ext.73: bits[28] = zero_ext(shift_x, new_bit_count=28, id=73)
  dropped_x: bits[28] = shll(wide_x__1, zero_ext.81, id=82, pos=0,74,25)
  literal.87: bits[28] = literal(value=0, id=87, pos=0,76,47)
  zero_ext.76: bits[28] = zero_ext(shift_y, new_bit_count=28, id=76)
  dropped_y: bits[28] = shll(wide_y__1, zero_ext.85, id=86, pos=0,75,25)
  literal.89: bits[28] = literal(value=0, id=89, pos=0,77,47)
  shrl.74: bits[28] = shrl(wide_x__1, zero_ext.73, id=74, pos=0,69,26)
  sticky_x: bits[1] = ugt(dropped_x, literal.87, id=88, pos=0,76,27)
  shrl.77: bits[28] = shrl(wide_y__1, zero_ext.76, id=77, pos=0,70,26)
  sticky_y: bits[1] = ugt(dropped_y, literal.89, id=90, pos=0,77,27)
  shifted_x: bits[28] = zero_ext(shrl.74, new_bit_count=28, id=75)
  zero_ext.91: bits[28] = zero_ext(sticky_x, new_bit_count=28, id=91)
  shifted_y: bits[28] = zero_ext(shrl.77, new_bit_count=28, id=78)
  zero_ext.93: bits[28] = zero_ext(sticky_y, new_bit_count=28, id=93)
  x_sign: bits[1] = tuple_index(x, index=0, id=95, pos=0,83,21)
  greater_exp_sign: bits[1] = tuple_index(greater_exp, index=0, id=96, pos=0,83,41)
  addend_x: bits[28] = or(shifted_x, zero_ext.91, id=92, pos=0,78,27)
  y_sign: bits[1] = tuple_index(y, index=0, id=100, pos=0,84,21)
  greater_exp_sign__1: bits[1] = tuple_index(greater_exp, index=0, id=101, pos=0,84,41)
  addend_y: bits[28] = or(shifted_y, zero_ext.93, id=94, pos=0,79,27)
  ne.97: bits[1] = ne(x_sign, greater_exp_sign, id=97, pos=0,83,27)
  neg.98: bits[28] = neg(addend_x, id=98, pos=0,83,49)
  ne.102: bits[1] = ne(y_sign, greater_exp_sign__1, id=102, pos=0,84,27)
  neg.103: bits[28] = neg(addend_y, id=103, pos=0,84,49)
  addend_x__1: bits[28] = sel(ne.97, cases=[addend_x, neg.98], id=99, pos=0,83,17)
  addend_y__1: bits[28] = sel(ne.102, cases=[addend_y, neg.103], id=104, pos=0,84,17)
  sign_ext.105: bits[29] = sign_ext(addend_x__1, new_bit_count=29, id=105)
  sign_ext.106: bits[29] = sign_ext(addend_y__1, new_bit_count=29, id=106)
  fraction: bits[29] = add(sign_ext.105, sign_ext.106, id=107, pos=0,88,50)
  literal.138: bits[29] = literal(value=0, id=138, pos=0,97,55)
  slt.139: bits[1] = slt(fraction, literal.138, id=139, pos=0,97,34)
  neg.140: bits[29] = neg(fraction, id=140, pos=0,97,59)
  sel.141: bits[29] = sel(slt.139, cases=[fraction, neg.140], id=141, pos=0,97,22)
  abs_fraction: bits[28] = bit_slice(sel.141, start=0, width=28, id=142)
  reverse.150: bits[28] = reverse(abs_fraction, id=150, pos=0,108,26)
  one_hot.151: bits[29] = one_hot(reverse.150, lsb_prio=true, id=151, pos=0,108,26)
  encode.152: bits[5] = encode(one_hot.151, id=152)
  leading_zeroes: bits[28] = zero_ext(encode.152, new_bit_count=28, id=153, pos=0,108,26)
  literal.154: bits[28] = literal(value=1, id=154, pos=0,109,50)
  carry_bit: bits[1] = bit_slice(abs_fraction, start=27, width=1, id=143, pos=0,102,30)
  cancel: bits[1] = ugt(leading_zeroes, literal.154, id=155, pos=0,109,30)
  tuple.160: (bits[1], bits[1]) = tuple(carry_bit, cancel, id=160, pos=0,111,30)
  literal.181: bits[1] = literal(value=0, id=181, pos=0,114,5)
  tuple_index.180: bits[1] = tuple_index(tuple.160, index=0, id=180)
  literal.172: bits[1] = literal(value=0, id=172, pos=0,113,5)
  tuple_index.171: bits[1] = tuple_index(tuple.160, index=0, id=171)
  literal.163: bits[1] = literal(value=1, id=163, pos=0,112,5)
  tuple_index.162: bits[1] = tuple_index(tuple.160, index=0, id=162)
  literal.179: bits[1] = literal(value=1, id=179)
  eq.182: bits[1] = eq(literal.181, tuple_index.180, id=182)
  literal.185: bits[1] = literal(value=0, id=185, pos=0,114,12)
  tuple_index.184: bits[1] = tuple_index(tuple.160, index=1, id=184)
  literal.170: bits[1] = literal(value=1, id=170)
  eq.173: bits[1] = eq(literal.172, tuple_index.171, id=173)
  literal.176: bits[1] = literal(value=1, id=176, pos=0,113,12)
  tuple_index.175: bits[1] = tuple_index(tuple.160, index=1, id=175)
  literal.161: bits[1] = literal(value=1, id=161)
  eq.164: bits[1] = eq(literal.163, tuple_index.162, id=164)
  literal.167: bits[1] = literal(value=0, id=167, pos=0,112,11)
  tuple_index.166: bits[1] = tuple_index(tuple.160, index=1, id=166)
  and.183: bits[1] = and(literal.179, eq.182, id=183)
  eq.186: bits[1] = eq(literal.185, tuple_index.184, id=186)
  and.174: bits[1] = and(literal.170, eq.173, id=174)
  eq.177: bits[1] = eq(literal.176, tuple_index.175, id=177)
  and.165: bits[1] = and(literal.161, eq.164, id=165)
  eq.168: bits[1] = eq(literal.167, tuple_index.166, id=168)
  literal.144: bits[28] = literal(value=1, id=144, pos=0,103,58)
  literal.156: bits[28] = literal(value=1, id=156, pos=0,110,77)
  and.187: bits[1] = and(and.183, eq.186, id=187)
  and.178: bits[1] = and(and.174, eq.177, id=178)
  and.169: bits[1] = and(and.165, eq.168, id=169)
  shrl.145: bits[28] = shrl(abs_fraction, literal.144, id=145, pos=0,103,37)
  bit_slice.147: bits[1] = bit_slice(abs_fraction, start=0, width=1, id=147, pos=0,104,53)
  sub.157: bits[28] = sub(leading_zeroes, literal.156, id=157, pos=0,110,57)
  concat.197: bits[3] = concat(and.187, and.178, and.169, id=197)
  carry_fraction: bits[27] = bit_slice(shrl.145, start=0, width=27, id=146)
  zero_ext.148: bits[27] = zero_ext(bit_slice.147, new_bit_count=27, id=148)
  shll.158: bits[28] = shll(abs_fraction, sub.157, id=158, pos=0,110,38)
  literal.190: bits[27] = literal(value=666, id=190, pos=0,115,39)
  one_hot.198: bits[4] = one_hot(concat.197, lsb_prio=true, id=198)
  carry_fraction__1: bits[27] = or(carry_fraction, zero_ext.148, id=149, pos=0,104,38)
  cancel_fraction: bits[27] = bit_slice(shll.158, start=0, width=27, id=159)
  bit_slice.188: bits[27] = bit_slice(abs_fraction, start=0, width=27, id=188)
  identity.196: bits[27] = identity(literal.190, id=196)
  shifted_fraction: bits[27] = one_hot_sel(one_hot.198, cases=[carry_fraction__1, cancel_fraction, bit_slice.188, identity.196], id=199)
  normal_chunk: bits[3] = bit_slice(shifted_fraction, start=0, width=3, id=200, pos=0,128,37)
  literal.202: bits[3] = literal(value=4, id=202, pos=0,131,28)
  half_way_chunk: bits[2] = bit_slice(shifted_fraction, start=2, width=2, id=201, pos=0,129,39)
  literal.204: bits[2] = literal(value=3, id=204, pos=0,131,57)
  ugt.203: bits[1] = ugt(normal_chunk, literal.202, id=203, pos=0,131,23)
  eq.205: bits[1] = eq(half_way_chunk, literal.204, id=205, pos=0,131,51)
  or.206: bits[1] = or(ugt.203, eq.205, id=206, pos=0,131,33)
  literal.208: bits[1] = literal(value=0, id=208, pos=0,132,16)
  literal.207: bits[1] = literal(value=1, id=207, pos=0,131,67)
  zero_ext.210: bits[28] = zero_ext(shifted_fraction, new_bit_count=28, id=210)
  literal.211: bits[28] = literal(value=8, id=211, pos=0,135,102)
  do_round_up: bits[1] = sel(or.206, cases=[literal.208, literal.207], id=209, pos=0,131,6)
  zero_ext.213: bits[28] = zero_ext(shifted_fraction, new_bit_count=28, id=213)
  add.212: bits[28] = add(zero_ext.210, literal.211, id=212, pos=0,135,82)
  rounded_fraction: bits[28] = sel(do_round_up, cases=[zero_ext.213, add.212], id=214, pos=0,135,25)
  greater_exp_bexp__2: bits[8] = tuple_index(greater_exp, index=1, id=224, pos=0,149,18)
  rounding_carry: bits[1] = bit_slice(rounded_fraction, start=27, width=1, id=215, pos=0,137,39)
  zero_ext.225: bits[10] = zero_ext(greater_exp_bexp__2, new_bit_count=10, id=225)
  zero_ext.226: bits[10] = zero_ext(rounding_carry, new_bit_count=10, id=226)
  literal.108: bits[29] = literal(value=0, id=108, pos=0,89,56)
  literal.110: bits[29] = literal(value=0, id=110, pos=0,90,75)
  add.227: bits[10] = add(zero_ext.225, zero_ext.226, id=227, pos=0,149,42)
  literal.228: bits[10] = literal(value=1, id=228, pos=0,151,20)
  fraction_is_zero: bits[1] = eq(fraction, literal.108, id=109, pos=0,89,34)
  slt.111: bits[1] = slt(fraction, literal.110, id=111, pos=0,90,54)
  add.229: bits[10] = add(add.227, literal.228, id=229, pos=0,150,40)
  bit_slice.230: bits[10] = bit_slice(leading_zeroes, start=0, width=10, id=230)
  tuple.112: (bits[1], bits[1]) = tuple(fraction_is_zero, slt.111, id=112, pos=0,90,26)
  wide_exponent: bits[10] = sub(add.229, bit_slice.230, id=231, pos=0,151,22)
  literal.232: bits[10] = literal(value=0, id=232, pos=0,152,58)
  bit_slice.217: bits[1] = bit_slice(rounded_fraction, start=27, width=1, id=217, pos=0,143,26)
  literal.219: bits[28] = literal(value=0, id=219, pos=0,143,81)
  literal.218: bits[28] = literal(value=1, id=218, pos=0,143,52)
  literal.124: bits[1] = literal(value=0, id=124, pos=0,92,5)
  tuple_index.123: bits[1] = tuple_index(tuple.112, index=0, id=123)
  literal.115: bits[1] = literal(value=1, id=115, pos=0,91,5)
  tuple_index.114: bits[1] = tuple_index(tuple.112, index=0, id=114)
  wide_exponent__1: bits[10] = sel(fraction_is_zero, cases=[wide_exponent, literal.232], id=233, pos=0,152,22)
  literal.234: bits[10] = literal(value=0, id=234, pos=0,156,39)
  literal.216: bits[28] = literal(value=3, id=216, pos=0,142,41)
  sel.220: bits[28] = sel(bit_slice.217, cases=[literal.219, literal.218], id=220, pos=0,143,7)
  literal.122: bits[1] = literal(value=1, id=122)
  eq.125: bits[1] = eq(literal.124, tuple_index.123, id=125)
  literal.128: bits[1] = literal(value=1, id=128, pos=0,92,12)
  tuple_index.127: bits[1] = tuple_index(tuple.112, index=1, id=127)
  literal.113: bits[1] = literal(value=1, id=113)
  eq.116: bits[1] = eq(literal.115, tuple_index.114, id=116)
  x_sign__1: bits[1] = tuple_index(x, index=0, id=259, pos=0,180,65)
  literal.260: bits[1] = literal(value=0, id=260, pos=0,180,77)
  y_sign__1: bits[1] = tuple_index(y, index=0, id=264, pos=0,181,65)
  literal.265: bits[1] = literal(value=0, id=265, pos=0,181,77)
  x_sign__2: bits[1] = tuple_index(x, index=0, id=272, pos=0,187,51)
  literal.273: bits[1] = literal(value=1, id=273, pos=0,187,63)
  y_sign__2: bits[1] = tuple_index(y, index=0, id=277, pos=0,188,51)
  literal.278: bits[1] = literal(value=1, id=278, pos=0,188,63)
  slt.235: bits[1] = slt(wide_exponent__1, literal.234, id=235, pos=0,156,23)
  bit_slice.237: bits[9] = bit_slice(wide_exponent__1, start=0, width=9, id=237)
  literal.236: bits[9] = literal(value=0, id=236, pos=0,156,56)
  fraction_shift: bits[28] = add(literal.216, sel.220, id=221, pos=0,142,43)
  and.126: bits[1] = and(literal.122, eq.125, id=126)
  eq.129: bits[1] = eq(literal.128, tuple_index.127, id=129)
  and.117: bits[1] = and(literal.113, eq.116, id=117)
  literal.119: bits[1] = literal(value=1, id=119, pos=0,91,11)
  invoke.258: bits[1] = invoke(x, to_apply=__apfloat__is_inf__8_23, id=258, pos=0,180,36)
  eq.261: bits[1] = eq(x_sign__1, literal.260, id=261, pos=0,180,71)
  invoke.263: bits[1] = invoke(y, to_apply=__apfloat__is_inf__8_23, id=263, pos=0,181,36)
  eq.266: bits[1] = eq(y_sign__1, literal.265, id=266, pos=0,181,71)
  invoke.271: bits[1] = invoke(x, to_apply=__apfloat__is_inf__8_23, id=271, pos=0,187,22)
  eq.274: bits[1] = eq(x_sign__2, literal.273, id=274, pos=0,187,57)
  invoke.276: bits[1] = invoke(y, to_apply=__apfloat__is_inf__8_23, id=276, pos=0,188,22)
  eq.279: bits[1] = eq(y_sign__2, literal.278, id=279, pos=0,188,57)
  invoke.243: bits[8] = invoke(to_apply=__std__mask_bits__8, id=243, pos=0,165,36)
  wide_exponent__2: bits[9] = sel(slt.235, cases=[bit_slice.237, literal.236], id=238, pos=0,156,6)
  literal.239: bits[9] = literal(value=1, id=239, pos=0,162,56)
  shrl.222: bits[28] = shrl(rounded_fraction, fraction_shift, id=222, pos=0,144,42)
  and.130: bits[1] = and(and.126, eq.129, id=130)
  and.120: bits[1] = and(and.117, literal.119, id=120)
  and.262: bits[1] = and(invoke.258, eq.261, id=262, pos=0,180,61)
  and.267: bits[1] = and(invoke.263, eq.266, id=267, pos=0,181,61)
  and.275: bits[1] = and(invoke.271, eq.274, id=275, pos=0,187,47)
  and.280: bits[1] = and(invoke.276, eq.279, id=280, pos=0,188,47)
  saturated_exp: bits[9] = zero_ext(invoke.243, new_bit_count=9, id=244)
  ult.240: bits[1] = ult(wide_exponent__2, literal.239, id=240, pos=0,162,41)
  result_fraction: bits[23] = bit_slice(shrl.222, start=0, width=23, id=223)
  literal.241: bits[23] = literal(value=0, id=241, pos=0,162,76)
  or.191: bits[1] = or(and.169, and.178, and.187, id=191)
  concat.135: bits[2] = concat(and.130, and.120, id=135)
  greater_exp_sign__2: bits[1] = tuple_index(greater_exp, index=0, id=131, pos=0,92,33)
  invoke.282: bits[1] = invoke(x, to_apply=__apfloat__is_nan__8_23, id=282, pos=0,189,37)
  invoke.283: bits[1] = invoke(y, to_apply=__apfloat__is_nan__8_23, id=283, pos=0,190,21)
  has_pos_inf: bits[1] = or(and.262, and.267, id=268, pos=0,180,81)
  has_neg_inf: bits[1] = or(and.275, and.280, id=281, pos=0,187,67)
  invoke.252: bits[1] = invoke(x, to_apply=__apfloat__is_inf__8_23, id=252, pos=0,175,38)
  invoke.253: bits[1] = invoke(y, to_apply=__apfloat__is_inf__8_23, id=253, pos=0,176,21)
  ult.246: bits[1] = ult(wide_exponent__2, saturated_exp, id=246, pos=0,168,23)
  literal.247: bits[23] = literal(value=0, id=247, pos=0,169,29)
  result_fraction__1: bits[23] = sel(ult.240, cases=[result_fraction, literal.241], id=242, pos=0,162,24)
  not.192: bits[1] = not(or.191, id=192)
  one_hot.136: bits[3] = one_hot(concat.135, lsb_prio=true, id=136)
  literal.121: bits[1] = literal(value=0, id=121, pos=0,91,20)
  not.132: bits[1] = not(greater_exp_sign__2, id=132, pos=0,92,21)
  greater_exp_sign__3: bits[1] = tuple_index(greater_exp, index=0, id=134, pos=0,93,20)
  ult.249: bits[1] = ult(wide_exponent__2, saturated_exp, id=249, pos=0,171,23)
  max_exp: bits[8] = invoke(to_apply=__std__mask_bits__8, id=245, pos=0,166,30)
  bit_slice.250: bits[8] = bit_slice(wide_exponent__2, start=0, width=8, id=250)
  or.284: bits[1] = or(invoke.282, invoke.283, id=284, pos=0,189,62)
  and.285: bits[1] = and(has_pos_inf, has_neg_inf, id=285, pos=0,190,61)
  is_operand_inf: bits[1] = or(invoke.252, invoke.253, id=254, pos=0,175,63)
  result_fraction__2: bits[23] = sel(ult.246, cases=[literal.247, result_fraction__1], id=248, pos=0,168,6)
  literal.256: bits[23] = literal(value=0, id=256, pos=0,178,60)
  and.193: bits[1] = and(__activated, not.192, id=193)
  result_sign: bits[1] = one_hot_sel(one_hot.136, cases=[literal.121, not.132, greater_exp_sign__3], id=137)
  not.269: bits[1] = not(has_pos_inf, id=269, pos=0,182,40)
  result_exponent: bits[8] = sel(ult.249, cases=[max_exp, bit_slice.250], id=251, pos=0,171,6)
  is_result_nan: bits[1] = or(or.284, and.285, id=286, pos=0,190,46)
  result_fraction__3: bits[23] = sel(is_operand_inf, cases=[result_fraction__2, literal.256], id=257, pos=0,178,24)
  not.194: bits[1] = not(and.193, id=194)
  result_sign__1: bits[1] = sel(is_operand_inf, cases=[result_sign, not.269], id=270, pos=0,182,20)
  literal.289: bits[1] = literal(value=0, id=289, pos=0,193,42)
  result_exponent__1: bits[8] = sel(is_operand_inf, cases=[result_exponent, max_exp], id=255, pos=0,177,24)
  result_fraction__4: bits[23] = sel(is_result_nan, cases=[result_fraction__3, fraction_high_bit], id=288, pos=0,192,24)
  assert.195: token = assert(__token, not.194, message="Assertion failure via fail!", id=195)
  result_sign__2: bits[1] = sel(is_result_nan, cases=[result_sign__1, literal.289], id=290, pos=0,193,20)
  result_exponent__2: bits[8] = sel(is_result_nan, cases=[result_exponent__1, max_exp], id=287, pos=0,191,24)
  zero_ext.291: bits[23] = zero_ext(result_fraction__4, new_bit_count=23, id=291)
  after_all.293: token = after_all(assert.195, id=293)
  tuple.292: (bits[1], bits[8], bits[23]) = tuple(result_sign__2, result_exponent__2, zero_ext.291, id=292, pos=0,196,31)
  EXP_SZ: bits[32] = literal(value=8, id=28, pos=0,44,11)
  WIDE_EXP: bits[32] = literal(value=9, id=30, pos=0,45,4)
  CARRY_EXP: bits[32] = literal(value=10, id=31, pos=0,46,4)
  CARRY_FRACTION: bits[32] = literal(value=29, id=33, pos=0,48,4)
  NORMALIZED_FRACTION: bits[32] = literal(value=27, id=34, pos=0,49,4)
  tuple_index.118: bits[1] = tuple_index(tuple.112, index=1, id=118)
  literal.133: bits[1] = literal(value=1, id=133, pos=0,93,4)
  literal.189: bits[1] = literal(value=1, id=189, pos=0,115,4)
  ret tuple.294: (token, (bits[1], bits[8], bits[23])) = tuple(after_all.293, tuple.292, id=294)
}

fn __itok__xls_modules_fp32_add_2__fp32_add_2(__token: token, __activated: bits[1], x: (bits[1], bits[8], bits[23]), y: (bits[1], bits[8], bits[23])) -> (token, (bits[1], bits[8], bits[23])) {
  invoke.299: (token, (bits[1], bits[8], bits[23])) = invoke(__token, __activated, x, y, to_apply=__itok__xls_modules_apfloat_add_2__add__10_29_8_23_27_9_28, id=299, pos=0,26,20)
  tuple_index.300: token = tuple_index(invoke.299, index=0, id=300)
  after_all.302: token = after_all(tuple_index.300, id=302)
  tuple_index.301: (bits[1], bits[8], bits[23]) = tuple_index(invoke.299, index=1, id=301)
  ret tuple.303: (token, (bits[1], bits[8], bits[23])) = tuple(after_all.302, tuple_index.301, id=303)
}

fn __xls_modules_fp32_add_2__fp32_add_2(x: (bits[1], bits[8], bits[23]), y: (bits[1], bits[8], bits[23])) -> (bits[1], bits[8], bits[23]) {
  after_all.306: token = after_all(id=306)
  literal.307: bits[1] = literal(value=1, id=307)
  invoke.308: (token, (bits[1], bits[8], bits[23])) = invoke(after_all.306, literal.307, x, y, to_apply=__itok__xls_modules_fp32_add_2__fp32_add_2, id=308)
  ret tuple_index.309: (bits[1], bits[8], bits[23]) = tuple_index(invoke.308, index=1, id=309)
}

fn __itok__f32add__main(__token: token, __activated: bits[1], x: (bits[1], bits[8], bits[23]), y: (bits[1], bits[8], bits[23])) -> (token, (bits[1], bits[8], bits[23])) {
  invoke.314: (token, (bits[1], bits[8], bits[23])) = invoke(__token, __activated, x, y, to_apply=__itok__xls_modules_fp32_add_2__fp32_add_2, id=314, pos=0,5,24)
  tuple_index.315: token = tuple_index(invoke.314, index=0, id=315)
  after_all.317: token = after_all(tuple_index.315, id=317)
  tuple_index.316: (bits[1], bits[8], bits[23]) = tuple_index(invoke.314, index=1, id=316)
  ret tuple.318: (token, (bits[1], bits[8], bits[23])) = tuple(after_all.317, tuple_index.316, id=318)
}

fn __f32add__main(x: (bits[1], bits[8], bits[23]), y: (bits[1], bits[8], bits[23])) -> (bits[1], bits[8], bits[23]) {
  after_all.321: token = after_all(id=321)
  literal.322: bits[1] = literal(value=1, id=322)
  invoke.323: (token, (bits[1], bits[8], bits[23])) = invoke(after_all.321, literal.322, x, y, to_apply=__itok__f32add__main, id=323)
  ret tuple_index.324: (bits[1], bits[8], bits[23]) = tuple_index(invoke.323, index=1, id=324)
}
