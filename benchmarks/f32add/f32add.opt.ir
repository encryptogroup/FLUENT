package f32add

fn __f32add__main(x: (bits[1], bits[8], bits[23]), y: (bits[1], bits[8], bits[23])) -> (bits[1], bits[8], bits[23]) {
  literal.1219: bits[2] = literal(value=0, id=1219)
  x_fraction__1: bits[23] = tuple_index(x, index=2, id=1220, pos=0,58,18)
  x_bexp__1: bits[8] = tuple_index(x, index=1, id=1224, pos=0,62,19)
  literal.1542: bits[2] = literal(value=0, id=1542)
  y_fraction__3: bits[23] = tuple_index(y, index=2, id=1221, pos=0,59,18)
  y_bexp__1: bits[8] = tuple_index(y, index=1, id=1226, pos=0,63,19)
  concat.1222: bits[25] = concat(literal.1219, x_fraction__1, id=1222)
  literal.1223: bits[25] = literal(value=8388608, id=1223, pos=0,57,70)
  literal.1225: bits[8] = literal(value=0, id=1225, pos=0,62,39)
  bit_slice.1508: bits[6] = bit_slice(x_bexp__1, start=2, width=6, id=1508)
  literal.1523: bits[6] = literal(value=7, id=1523)
  concat.1227: bits[25] = concat(literal.1542, y_fraction__3, id=1227)
  literal.1544: bits[25] = literal(value=8388608, id=1544, pos=0,57,70)
  literal.1545: bits[8] = literal(value=0, id=1545, pos=0,62,39)
  bit_slice.1513: bits[6] = bit_slice(y_bexp__1, start=2, width=6, id=1513)
  literal.1562: bits[6] = literal(value=7, id=1562)
  or.1228: bits[25] = or(concat.1222, literal.1223, id=1228, pos=0,58,50)
  literal.1229: bits[3] = literal(value=0, id=1229, pos=0,58,76)
  ne.1230: bits[1] = ne(x_bexp__1, literal.1225, id=1230, pos=0,62,15)
  add.1510: bits[6] = add(bit_slice.1508, literal.1523, id=1510)
  bit_slice.1511: bits[2] = bit_slice(x_bexp__1, start=0, width=2, id=1511)
  ugt.1232: bits[1] = ugt(x_bexp__1, y_bexp__1, id=1232, pos=0,66,30)
  or.1233: bits[25] = or(concat.1227, literal.1544, id=1233, pos=0,59,50)
  literal.1547: bits[3] = literal(value=0, id=1547, pos=0,58,76)
  ne.1234: bits[1] = ne(y_bexp__1, literal.1545, id=1234, pos=0,63,15)
  add.1515: bits[6] = add(bit_slice.1513, literal.1562, id=1515)
  bit_slice.1516: bits[2] = bit_slice(y_bexp__1, start=0, width=2, id=1516)
  wide_x: bits[28] = concat(or.1228, literal.1229, id=1235, pos=0,58,76)
  sign_ext.1236: bits[28] = sign_ext(ne.1230, new_bit_count=28, id=1236, pos=0,62,15)
  concat.1512: bits[8] = concat(add.1510, bit_slice.1511, id=1512)
  greater_exp_bexp: bits[8] = sel(ugt.1232, cases=[y_bexp__1, x_bexp__1], id=1238, pos=0,66,20)
  wide_y: bits[28] = concat(or.1233, literal.1547, id=1239, pos=0,59,76)
  sign_ext.1240: bits[28] = sign_ext(ne.1234, new_bit_count=28, id=1240, pos=0,63,15)
  concat.1517: bits[8] = concat(add.1515, bit_slice.1516, id=1517)
  wide_x__1: bits[28] = and(wide_x, sign_ext.1236, id=1242, pos=0,62,15)
  sub.1243: bits[8] = sub(concat.1512, greater_exp_bexp, id=1243, pos=0,74,58)
  wide_y__1: bits[28] = and(wide_y, sign_ext.1240, id=1244, pos=0,63,15)
  sub.1245: bits[8] = sub(concat.1517, greater_exp_bexp, id=1245, pos=0,75,58)
  dropped_x: bits[28] = shll(wide_x__1, sub.1243, id=1246, pos=0,74,25)
  dropped_y: bits[28] = shll(wide_y__1, sub.1245, id=1247, pos=0,75,25)
  bit_slice.1248: bits[25] = bit_slice(dropped_x, start=3, width=25, id=1248, pos=0,76,27)
  literal.1249: bits[25] = literal(value=0, id=1249, pos=0,76,27)
  bit_slice.1250: bits[25] = bit_slice(dropped_y, start=3, width=25, id=1250, pos=0,77,27)
  literal.1548: bits[25] = literal(value=0, id=1548, pos=0,76,27)
  shift_x: bits[8] = sub(greater_exp_bexp, x_bexp__1, id=1251, pos=0,67,33)
  literal.1252: bits[27] = literal(value=0, id=1252)
  sticky_x: bits[1] = ne(bit_slice.1248, literal.1249, id=1253, pos=0,76,27)
  shift_y: bits[8] = sub(greater_exp_bexp, y_bexp__1, id=1254, pos=0,68,33)
  literal.1549: bits[27] = literal(value=0, id=1549)
  sticky_y: bits[1] = ne(bit_slice.1250, literal.1548, id=1255, pos=0,77,27)
  y_sign__1: bits[1] = tuple_index(y, index=0, id=1256, pos=0,66,20)
  x_sign__1: bits[1] = tuple_index(x, index=0, id=1257, pos=0,66,20)
  shifted_x: bits[28] = shrl(wide_x__1, shift_x, id=1258, pos=0,69,26)
  concat.1259: bits[28] = concat(literal.1252, sticky_x, id=1259)
  shifted_y: bits[28] = shrl(wide_y__1, shift_y, id=1260, pos=0,70,26)
  concat.1261: bits[28] = concat(literal.1549, sticky_y, id=1261)
  greater_exp_sign: bits[1] = sel(ugt.1232, cases=[y_sign__1, x_sign__1], id=1262, pos=0,66,20)
  addend_x: bits[28] = or(shifted_x, concat.1259, id=1263, pos=0,78,27)
  addend_y: bits[28] = or(shifted_y, concat.1261, id=1264, pos=0,79,27)
  xor.1265: bits[1] = xor(x_sign__1, greater_exp_sign, id=1265, pos=0,83,27)
  neg.1266: bits[28] = neg(addend_x, id=1266, pos=0,83,49)
  xor.1267: bits[1] = xor(y_sign__1, greater_exp_sign, id=1267, pos=0,84,27)
  neg.1268: bits[28] = neg(addend_y, id=1268, pos=0,84,49)
  addend_x__1: bits[28] = sel(xor.1265, cases=[addend_x, neg.1266], id=1269, pos=0,83,17)
  addend_y__1: bits[28] = sel(xor.1267, cases=[addend_y, neg.1268], id=1270, pos=0,84,17)
  sign_ext.1271: bits[29] = sign_ext(addend_x__1, new_bit_count=29, id=1271)
  sign_ext.1272: bits[29] = sign_ext(addend_y__1, new_bit_count=29, id=1272)
  fraction: bits[29] = add(sign_ext.1271, sign_ext.1272, id=1273, pos=0,88,50)
  bit_slice.1274: bits[28] = bit_slice(fraction, start=0, width=28, id=1274, pos=0,88,50)
  bit_slice.1275: bits[1] = bit_slice(fraction, start=28, width=1, id=1275, pos=0,97,34)
  neg.1276: bits[28] = neg(bit_slice.1274, id=1276, pos=0,97,59)
  abs_fraction: bits[28] = sel(bit_slice.1275, cases=[bit_slice.1274, neg.1276], id=1277, pos=0,97,22)
  reverse.1278: bits[28] = reverse(abs_fraction, id=1278, pos=0,108,26)
  one_hot.1279: bits[29] = one_hot(reverse.1278, lsb_prio=true, id=1279, pos=0,108,26)
  encode.1280: bits[5] = encode(one_hot.1279, id=1280)
  bit_slice.1281: bits[1] = bit_slice(encode.1280, start=1, width=1, id=1281, pos=0,108,26)
  bit_slice.1282: bits[1] = bit_slice(encode.1280, start=2, width=1, id=1282, pos=0,108,26)
  bit_slice.1283: bits[1] = bit_slice(encode.1280, start=3, width=1, id=1283, pos=0,108,26)
  bit_slice.1284: bits[1] = bit_slice(encode.1280, start=4, width=1, id=1284, pos=0,108,26)
  carry_bit: bits[1] = bit_slice(abs_fraction, start=27, width=1, id=1285, pos=0,102,30)
  cancel: bits[1] = or(bit_slice.1281, bit_slice.1282, bit_slice.1283, bit_slice.1284, id=1286, pos=0,108,26)
  not.1287: bits[1] = not(carry_bit, id=1287)
  not.1288: bits[1] = not(cancel, id=1288)
  and.1290: bits[1] = and(not.1287, not.1288, id=1290)
  and.1291: bits[1] = and(not.1287, cancel, id=1291)
  and.1292: bits[1] = and(carry_bit, not.1288, id=1292)
  literal.1289: bits[23] = literal(value=0, id=1289, pos=0,108,26)
  not.1472: bits[1] = not(and.1290, id=1472)
  not.1473: bits[1] = not(and.1291, id=1473)
  not.1474: bits[1] = not(and.1292, id=1474)
  literal.1293: bits[26] = literal(value=0, id=1293)
  bit_slice.1294: bits[1] = bit_slice(abs_fraction, start=0, width=1, id=1294, pos=0,104,53)
  leading_zeroes: bits[28] = concat(literal.1289, encode.1280, id=1295, pos=0,108,26)
  literal.1296: bits[28] = literal(value=268435455, id=1296, pos=0,110,57)
  and.1471: bits[1] = and(not.1472, not.1473, not.1474, id=1471)
  carry_fraction: bits[27] = bit_slice(abs_fraction, start=1, width=27, id=1298, pos=0,103,37)
  concat.1299: bits[27] = concat(literal.1293, bit_slice.1294, id=1299)
  bit_slice.1300: bits[27] = bit_slice(abs_fraction, start=0, width=27, id=1300, pos=0,110,38)
  add.1301: bits[28] = add(leading_zeroes, literal.1296, id=1301, pos=0,110,57)
  concat.1441: bits[4] = concat(and.1471, and.1290, and.1291, and.1292, id=1441)
  carry_fraction__1: bits[27] = or(carry_fraction, concat.1299, id=1303, pos=0,104,38)
  cancel_fraction: bits[27] = shll(bit_slice.1300, add.1301, id=1304)
  literal.1305: bits[27] = literal(value=666, id=1305, pos=0,115,39)
  shifted_fraction: bits[27] = one_hot_sel(concat.1441, cases=[carry_fraction__1, cancel_fraction, bit_slice.1300, literal.1305], id=1306)
  literal.1561: bits[1] = literal(value=0, id=1561)
  bit_slice.1531: bits[24] = bit_slice(shifted_fraction, start=3, width=24, id=1531, pos=0,135,82)
  normal_chunk: bits[3] = bit_slice(shifted_fraction, start=0, width=3, id=1307, pos=0,128,37)
  literal.1308: bits[3] = literal(value=4, id=1308, pos=0,131,28)
  half_way_chunk: bits[2] = bit_slice(shifted_fraction, start=2, width=2, id=1309, pos=0,129,39)
  literal.1310: bits[2] = literal(value=3, id=1310, pos=0,131,57)
  concat.1532: bits[25] = concat(literal.1561, bit_slice.1531, id=1532, pos=0,135,82)
  literal.1524: bits[25] = literal(value=1, id=1524, pos=0,135,82)
  ugt.1312: bits[1] = ugt(normal_chunk, literal.1308, id=1312, pos=0,131,23)
  eq.1313: bits[1] = eq(half_way_chunk, literal.1310, id=1313, pos=0,131,51)
  literal.1456: bits[1] = literal(value=0, id=1456)
  add.1520: bits[25] = add(concat.1532, literal.1524, id=1520, pos=0,135,82)
  do_round_up: bits[1] = or(ugt.1312, eq.1313, id=1316, pos=0,131,33)
  concat.1314: bits[28] = concat(literal.1456, shifted_fraction, id=1314)
  concat.1537: bits[28] = concat(add.1520, normal_chunk, id=1537, pos=0,135,82)
  rounded_fraction: bits[28] = sel(do_round_up, cases=[concat.1314, concat.1537], id=1318, pos=0,135,25)
  literal.1559: bits[1] = literal(value=0, id=1559)
  literal.1546: bits[8] = literal(value=0, id=1546, pos=0,62,39)
  rounding_carry: bits[1] = bit_slice(rounded_fraction, start=27, width=1, id=1319, pos=0,137,39)
  concat.1320: bits[9] = concat(literal.1559, greater_exp_bexp, id=1320)
  concat.1321: bits[9] = concat(literal.1546, rounding_carry, id=1321)
  literal.1560: bits[1] = literal(value=0, id=1560)
  add.1322: bits[9] = add(concat.1320, concat.1321, id=1322, pos=0,149,42)
  concat.1323: bits[10] = concat(literal.1560, add.1322, id=1323, pos=0,149,42)
  literal.1324: bits[10] = literal(value=1, id=1324, pos=0,151,20)
  literal.1325: bits[5] = literal(value=0, id=1325)
  literal.1326: bits[29] = literal(value=0, id=1326, pos=0,89,56)
  add.1327: bits[10] = add(concat.1323, literal.1324, id=1327, pos=0,150,40)
  concat.1328: bits[10] = concat(literal.1325, encode.1280, id=1328)
  ne.1329: bits[1] = ne(fraction, literal.1326, id=1329, pos=0,152,22)
  wide_exponent: bits[10] = sub(add.1327, concat.1328, id=1330, pos=0,151,22)
  sign_ext.1331: bits[10] = sign_ext(ne.1329, new_bit_count=10, id=1331, pos=0,152,22)
  wide_exponent__1: bits[10] = and(wide_exponent, sign_ext.1331, id=1332, pos=0,152,22)
  bit_slice.1333: bits[1] = bit_slice(wide_exponent__1, start=9, width=1, id=1333, pos=0,156,23)
  not.1342: bits[1] = not(bit_slice.1333, id=1342, pos=0,156,6)
  bit_slice.1347: bits[9] = bit_slice(wide_exponent__1, start=0, width=9, id=1347)
  sign_ext.1348: bits[9] = sign_ext(not.1342, new_bit_count=9, id=1348, pos=0,156,6)
  max_exp__3: bits[8] = literal(value=255, id=1557, pos=0,446,27)
  literal.1552: bits[23] = literal(value=0, id=1552, pos=0,108,26)
  max_exp__4: bits[8] = literal(value=255, id=1558, pos=0,446,27)
  literal.1553: bits[23] = literal(value=0, id=1553, pos=0,108,26)
  max_exp: bits[8] = literal(value=255, id=1335, pos=0,446,27)
  literal.1550: bits[23] = literal(value=0, id=1550, pos=0,108,26)
  max_exp__1: bits[8] = literal(value=255, id=1555, pos=0,446,27)
  literal.1551: bits[23] = literal(value=0, id=1551, pos=0,108,26)
  wide_exponent__2: bits[9] = and(bit_slice.1347, sign_ext.1348, id=1351, pos=0,156,6)
  ne.1477: bits[1] = ne(x_bexp__1, max_exp__3, id=1477, pos=0,180,61)
  ne.1478: bits[1] = ne(x_fraction__1, literal.1552, id=1478, pos=0,180,61)
  ne.1479: bits[1] = ne(y_bexp__1, max_exp__4, id=1479, pos=0,181,61)
  ne.1480: bits[1] = ne(y_fraction__3, literal.1553, id=1480, pos=0,181,61)
  eq.1343: bits[1] = eq(x_bexp__1, max_exp, id=1343, pos=0,446,10)
  eq.1344: bits[1] = eq(x_fraction__1, literal.1550, id=1344, pos=0,446,52)
  eq.1345: bits[1] = eq(y_bexp__1, max_exp__1, id=1345, pos=0,446,10)
  eq.1346: bits[1] = eq(y_fraction__3, literal.1551, id=1346, pos=0,446,52)
  literal.1543: bits[2] = literal(value=0, id=1543)
  bit_slice.1356: bits[1] = bit_slice(wide_exponent__2, start=1, width=1, id=1356, pos=0,156,6)
  bit_slice.1357: bits[1] = bit_slice(wide_exponent__2, start=2, width=1, id=1357, pos=0,156,6)
  bit_slice.1358: bits[1] = bit_slice(wide_exponent__2, start=3, width=1, id=1358, pos=0,156,6)
  bit_slice.1359: bits[1] = bit_slice(wide_exponent__2, start=4, width=1, id=1359, pos=0,156,6)
  bit_slice.1360: bits[1] = bit_slice(wide_exponent__2, start=5, width=1, id=1360, pos=0,156,6)
  bit_slice.1361: bits[1] = bit_slice(wide_exponent__2, start=6, width=1, id=1361, pos=0,156,6)
  bit_slice.1362: bits[1] = bit_slice(wide_exponent__2, start=7, width=1, id=1362, pos=0,156,6)
  bit_slice.1363: bits[1] = bit_slice(wide_exponent__2, start=8, width=1, id=1363, pos=0,156,6)
  nor.1464: bits[1] = nor(ne.1477, ne.1478, x_sign__1, id=1464, pos=0,180,61)
  nor.1468: bits[1] = nor(ne.1479, ne.1480, y_sign__1, id=1468, pos=0,181,61)
  and.1469: bits[1] = and(eq.1343, eq.1344, x_sign__1, id=1469, pos=0,187,47)
  and.1470: bits[1] = and(eq.1345, eq.1346, y_sign__1, id=1470, pos=0,188,47)
  literal.1554: bits[29] = literal(value=0, id=1554, pos=0,89,56)
  bit_slice.1377: bits[1] = bit_slice(wide_exponent__2, start=0, width=1, id=1377, pos=0,156,6)
  concat.1378: bits[3] = concat(literal.1543, rounding_carry, id=1378, pos=0,143,7)
  literal.1379: bits[3] = literal(value=3, id=1379, pos=0,142,41)
  or.1380: bits[1] = or(bit_slice.1356, bit_slice.1357, bit_slice.1358, bit_slice.1359, bit_slice.1360, bit_slice.1361, bit_slice.1362, bit_slice.1363, id=1380, pos=0,156,6)
  has_pos_inf: bits[1] = or(nor.1464, nor.1468, id=1386, pos=0,180,81)
  has_neg_inf: bits[1] = or(and.1469, and.1470, id=1387, pos=0,187,67)
  not.1538: bits[1] = not(bit_slice.1275, id=1538)
  fraction_is_zero: bits[1] = eq(fraction, literal.1554, id=1484)
  not.1540: bits[1] = not(greater_exp_sign, id=1540)
  and.1389: bits[1] = and(bit_slice.1377, bit_slice.1356, bit_slice.1357, bit_slice.1358, bit_slice.1359, bit_slice.1360, bit_slice.1361, bit_slice.1362, id=1389, pos=0,156,6)
  add.1390: bits[3] = add(concat.1378, literal.1379, id=1390, pos=0,142,43)
  nor.1391: bits[1] = nor(or.1380, bit_slice.1377, id=1391, pos=0,162,41)
  and.1349: bits[1] = and(eq.1343, eq.1344, id=1349, pos=0,446,38)
  and.1350: bits[1] = and(eq.1345, eq.1346, id=1350, pos=0,446,38)
  and.1393: bits[1] = and(eq.1343, ne.1478, id=1393, pos=0,451,38)
  and.1394: bits[1] = and(eq.1345, ne.1480, id=1394, pos=0,451,38)
  and.1395: bits[1] = and(has_pos_inf, has_neg_inf, id=1395, pos=0,190,61)
  nor.1539: bits[1] = nor(not.1538, greater_exp_sign, id=1539)
  nor.1541: bits[1] = nor(bit_slice.1275, fraction_is_zero, not.1540, id=1541)
  nor.1398: bits[1] = nor(bit_slice.1363, and.1389, id=1398, pos=0,171,23)
  shrl.1399: bits[28] = shrl(rounded_fraction, add.1390, id=1399, pos=0,144,42)
  not.1400: bits[1] = not(nor.1391, id=1400, pos=0,162,24)
  nor.1401: bits[1] = nor(and.1349, and.1350, id=1401, pos=0,178,24)
  is_result_nan: bits[1] = or(and.1393, and.1394, and.1395, id=1403, pos=0,190,46)
  is_operand_inf: bits[1] = or(and.1349, and.1350, id=1404, pos=0,175,63)
  result_sign: bits[1] = or(nor.1539, nor.1541, id=1530)
  not.1406: bits[1] = not(has_pos_inf, id=1406, pos=0,182,40)
  not.1407: bits[1] = not(nor.1398, id=1407, pos=0,177,24)
  result_fraction: bits[23] = bit_slice(shrl.1399, start=0, width=23, id=1408)
  sign_ext.1409: bits[23] = sign_ext(not.1400, new_bit_count=23, id=1409, pos=0,162,24)
  sign_ext.1410: bits[23] = sign_ext(nor.1398, new_bit_count=23, id=1410, pos=0,168,6)
  sign_ext.1411: bits[23] = sign_ext(nor.1401, new_bit_count=23, id=1411, pos=0,178,24)
  not.1413: bits[1] = not(is_result_nan, id=1413, pos=0,193,20)
  result_sign__1: bits[1] = sel(is_operand_inf, cases=[result_sign, not.1406], id=1414, pos=0,182,20)
  or.1415: bits[1] = or(is_result_nan, is_operand_inf, not.1407, id=1415, pos=0,191,24)
  bit_slice.1416: bits[8] = bit_slice(wide_exponent__2, start=0, width=8, id=1416)
  max_exp__2: bits[8] = literal(value=255, id=1556, pos=0,446,27)
  result_fraction__3: bits[23] = and(result_fraction, sign_ext.1409, sign_ext.1410, sign_ext.1411, id=1418, pos=0,178,24)
  fraction_high_bit: bits[23] = literal(value=4194304, id=1419, pos=0,56,44)
  after_all.321: token = after_all(id=321)
  or.1381: bits[1] = or(and.1292, and.1291, and.1290, id=1381)
  result_sign__3: bits[1] = and(not.1413, result_sign__1, id=1421, pos=0,193,20)
  result_exponent__2: bits[8] = sel(or.1415, cases=[bit_slice.1416, max_exp__2], id=1422, pos=0,191,24)
  result_fraction__4: bits[23] = sel(is_result_nan, cases=[result_fraction__3, fraction_high_bit], id=1423, pos=0,192,24)
  assert.1420: token = assert(after_all.321, or.1381, message="Assertion failure via fail!", id=1420)
  ret tuple.1425: (bits[1], bits[8], bits[23]) = tuple(result_sign__3, result_exponent__2, result_fraction__4, id=1425, pos=0,196,31)
}
