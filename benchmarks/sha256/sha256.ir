package sha256

fn __std__rrot__32(x: bits[32], y: bits[32]) -> bits[32] {
  N: bits[32] = literal(value=32, id=3, pos=0,220,12)
  zero_ext.5: bits[32] = zero_ext(N, new_bit_count=32, id=5)
  sub.6: bits[32] = sub(zero_ext.5, y, id=6, pos=0,221,35)
  shrl.4: bits[32] = shrl(x, y, id=4, pos=0,221,5)
  shll.7: bits[32] = shll(x, sub.6, id=7, pos=0,221,16)
  ret or.8: bits[32] = or(shrl.4, shll.7, id=8, pos=0,221,11)
}

fn ____sha256__sha256_chunk_w_table_counted_for_0_body(i: bits[32], w: bits[32][64]) -> bits[32][64] {
  literal.79: bits[32] = literal(value=16, id=79, pos=0,35,32)
  add.80: bits[32] = add(i, literal.79, id=80, pos=0,35,26)
  literal.81: bits[32] = literal(value=15, id=81, pos=0,35,41)
  sub.82: bits[32] = sub(add.80, literal.81, id=82, pos=0,35,35)
  literal.92: bits[32] = literal(value=16, id=92, pos=0,39,31)
  literal.105: bits[32] = literal(value=16, id=105, pos=0,43,31)
  w_im15: bits[32] = array_index(w, indices=[sub.82], id=83, pos=0,35,23)
  literal.84: bits[32] = literal(value=7, id=84, pos=0,36,41)
  literal.86: bits[32] = literal(value=18, id=86, pos=0,37,40)
  add.93: bits[32] = add(i, literal.92, id=93, pos=0,39,25)
  literal.94: bits[32] = literal(value=2, id=94, pos=0,39,40)
  add.106: bits[32] = add(i, literal.105, id=106, pos=0,43,25)
  literal.107: bits[32] = literal(value=16, id=107, pos=0,43,40)
  invoke.85: bits[32] = invoke(w_im15, literal.84, to_apply=__std__rrot__32, id=85, pos=0,36,28)
  invoke.87: bits[32] = invoke(w_im15, literal.86, to_apply=__std__rrot__32, id=87, pos=0,37,27)
  literal.89: bits[32] = literal(value=3, id=89, pos=0,38,33)
  literal.111: bits[32] = literal(value=16, id=111, pos=0,43,62)
  sub.95: bits[32] = sub(add.93, literal.94, id=95, pos=0,39,34)
  sub.108: bits[32] = sub(add.106, literal.107, id=108, pos=0,43,34)
  xor.88: bits[32] = xor(invoke.85, invoke.87, id=88, pos=0,37,16)
  shrl.90: bits[32] = shrl(w_im15, literal.89, id=90, pos=0,38,26)
  add.112: bits[32] = add(i, literal.111, id=112, pos=0,43,56)
  literal.113: bits[32] = literal(value=7, id=113, pos=0,43,71)
  w_im2: bits[32] = array_index(w, indices=[sub.95], id=96, pos=0,39,22)
  literal.97: bits[32] = literal(value=17, id=97, pos=0,40,40)
  literal.99: bits[32] = literal(value=19, id=99, pos=0,41,39)
  array_index.109: bits[32] = array_index(w, indices=[sub.108], id=109, pos=0,43,22)
  s_0: bits[32] = xor(xor.88, shrl.90, id=91, pos=0,38,16)
  sub.114: bits[32] = sub(add.112, literal.113, id=114, pos=0,43,65)
  invoke.98: bits[32] = invoke(w_im2, literal.97, to_apply=__std__rrot__32, id=98, pos=0,40,28)
  invoke.100: bits[32] = invoke(w_im2, literal.99, to_apply=__std__rrot__32, id=100, pos=0,41,27)
  literal.102: bits[32] = literal(value=10, id=102, pos=0,42,32)
  add.110: bits[32] = add(array_index.109, s_0, id=110, pos=0,43,44)
  array_index.115: bits[32] = array_index(w, indices=[sub.114], id=115, pos=0,43,53)
  xor.101: bits[32] = xor(invoke.98, invoke.100, id=101, pos=0,41,16)
  shrl.103: bits[32] = shrl(w_im2, literal.102, id=103, pos=0,42,25)
  add.116: bits[32] = add(add.110, array_index.115, id=116, pos=0,43,50)
  s_1: bits[32] = xor(xor.101, shrl.103, id=104, pos=0,42,16)
  literal.118: bits[32] = literal(value=16, id=118, pos=0,44,22)
  value: bits[32] = add(add.116, s_1, id=117, pos=0,43,74)
  add.119: bits[32] = add(i, literal.118, id=119, pos=0,44,16)
  ret array_update.120: bits[32][64] = array_update(w, value, indices=[add.119], id=120, pos=0,44,10)
}

fn __sha256__sha256_chunk_w_table(chunk: bits[512]) -> bits[32][64] {
  literal.10: bits[1536] = literal(value=0x0, id=10, pos=0,29,45)
  concat.11: bits[2048] = concat(chunk, literal.10, id=11, pos=0,29,31)
  bit_slice.75: bits[32] = bit_slice(concat.11, start=2016, width=32, id=75)
  bit_slice.74: bits[32] = bit_slice(concat.11, start=1984, width=32, id=74)
  bit_slice.73: bits[32] = bit_slice(concat.11, start=1952, width=32, id=73)
  bit_slice.72: bits[32] = bit_slice(concat.11, start=1920, width=32, id=72)
  bit_slice.71: bits[32] = bit_slice(concat.11, start=1888, width=32, id=71)
  bit_slice.70: bits[32] = bit_slice(concat.11, start=1856, width=32, id=70)
  bit_slice.69: bits[32] = bit_slice(concat.11, start=1824, width=32, id=69)
  bit_slice.68: bits[32] = bit_slice(concat.11, start=1792, width=32, id=68)
  bit_slice.67: bits[32] = bit_slice(concat.11, start=1760, width=32, id=67)
  bit_slice.66: bits[32] = bit_slice(concat.11, start=1728, width=32, id=66)
  bit_slice.65: bits[32] = bit_slice(concat.11, start=1696, width=32, id=65)
  bit_slice.64: bits[32] = bit_slice(concat.11, start=1664, width=32, id=64)
  bit_slice.63: bits[32] = bit_slice(concat.11, start=1632, width=32, id=63)
  bit_slice.62: bits[32] = bit_slice(concat.11, start=1600, width=32, id=62)
  bit_slice.61: bits[32] = bit_slice(concat.11, start=1568, width=32, id=61)
  bit_slice.60: bits[32] = bit_slice(concat.11, start=1536, width=32, id=60)
  bit_slice.59: bits[32] = bit_slice(concat.11, start=1504, width=32, id=59)
  bit_slice.58: bits[32] = bit_slice(concat.11, start=1472, width=32, id=58)
  bit_slice.57: bits[32] = bit_slice(concat.11, start=1440, width=32, id=57)
  bit_slice.56: bits[32] = bit_slice(concat.11, start=1408, width=32, id=56)
  bit_slice.55: bits[32] = bit_slice(concat.11, start=1376, width=32, id=55)
  bit_slice.54: bits[32] = bit_slice(concat.11, start=1344, width=32, id=54)
  bit_slice.53: bits[32] = bit_slice(concat.11, start=1312, width=32, id=53)
  bit_slice.52: bits[32] = bit_slice(concat.11, start=1280, width=32, id=52)
  bit_slice.51: bits[32] = bit_slice(concat.11, start=1248, width=32, id=51)
  bit_slice.50: bits[32] = bit_slice(concat.11, start=1216, width=32, id=50)
  bit_slice.49: bits[32] = bit_slice(concat.11, start=1184, width=32, id=49)
  bit_slice.48: bits[32] = bit_slice(concat.11, start=1152, width=32, id=48)
  bit_slice.47: bits[32] = bit_slice(concat.11, start=1120, width=32, id=47)
  bit_slice.46: bits[32] = bit_slice(concat.11, start=1088, width=32, id=46)
  bit_slice.45: bits[32] = bit_slice(concat.11, start=1056, width=32, id=45)
  bit_slice.44: bits[32] = bit_slice(concat.11, start=1024, width=32, id=44)
  bit_slice.43: bits[32] = bit_slice(concat.11, start=992, width=32, id=43)
  bit_slice.42: bits[32] = bit_slice(concat.11, start=960, width=32, id=42)
  bit_slice.41: bits[32] = bit_slice(concat.11, start=928, width=32, id=41)
  bit_slice.40: bits[32] = bit_slice(concat.11, start=896, width=32, id=40)
  bit_slice.39: bits[32] = bit_slice(concat.11, start=864, width=32, id=39)
  bit_slice.38: bits[32] = bit_slice(concat.11, start=832, width=32, id=38)
  bit_slice.37: bits[32] = bit_slice(concat.11, start=800, width=32, id=37)
  bit_slice.36: bits[32] = bit_slice(concat.11, start=768, width=32, id=36)
  bit_slice.35: bits[32] = bit_slice(concat.11, start=736, width=32, id=35)
  bit_slice.34: bits[32] = bit_slice(concat.11, start=704, width=32, id=34)
  bit_slice.33: bits[32] = bit_slice(concat.11, start=672, width=32, id=33)
  bit_slice.32: bits[32] = bit_slice(concat.11, start=640, width=32, id=32)
  bit_slice.31: bits[32] = bit_slice(concat.11, start=608, width=32, id=31)
  bit_slice.30: bits[32] = bit_slice(concat.11, start=576, width=32, id=30)
  bit_slice.29: bits[32] = bit_slice(concat.11, start=544, width=32, id=29)
  bit_slice.28: bits[32] = bit_slice(concat.11, start=512, width=32, id=28)
  bit_slice.27: bits[32] = bit_slice(concat.11, start=480, width=32, id=27)
  bit_slice.26: bits[32] = bit_slice(concat.11, start=448, width=32, id=26)
  bit_slice.25: bits[32] = bit_slice(concat.11, start=416, width=32, id=25)
  bit_slice.24: bits[32] = bit_slice(concat.11, start=384, width=32, id=24)
  bit_slice.23: bits[32] = bit_slice(concat.11, start=352, width=32, id=23)
  bit_slice.22: bits[32] = bit_slice(concat.11, start=320, width=32, id=22)
  bit_slice.21: bits[32] = bit_slice(concat.11, start=288, width=32, id=21)
  bit_slice.20: bits[32] = bit_slice(concat.11, start=256, width=32, id=20)
  bit_slice.19: bits[32] = bit_slice(concat.11, start=224, width=32, id=19)
  bit_slice.18: bits[32] = bit_slice(concat.11, start=192, width=32, id=18)
  bit_slice.17: bits[32] = bit_slice(concat.11, start=160, width=32, id=17)
  bit_slice.16: bits[32] = bit_slice(concat.11, start=128, width=32, id=16)
  bit_slice.15: bits[32] = bit_slice(concat.11, start=96, width=32, id=15)
  bit_slice.14: bits[32] = bit_slice(concat.11, start=64, width=32, id=14)
  bit_slice.13: bits[32] = bit_slice(concat.11, start=32, width=32, id=13)
  bit_slice.12: bits[32] = bit_slice(concat.11, start=0, width=32, id=12)
  w_init: bits[32][64] = array(bit_slice.75, bit_slice.74, bit_slice.73, bit_slice.72, bit_slice.71, bit_slice.70, bit_slice.69, bit_slice.68, bit_slice.67, bit_slice.66, bit_slice.65, bit_slice.64, bit_slice.63, bit_slice.62, bit_slice.61, bit_slice.60, bit_slice.59, bit_slice.58, bit_slice.57, bit_slice.56, bit_slice.55, bit_slice.54, bit_slice.53, bit_slice.52, bit_slice.51, bit_slice.50, bit_slice.49, bit_slice.48, bit_slice.47, bit_slice.46, bit_slice.45, bit_slice.44, bit_slice.43, bit_slice.42, bit_slice.41, bit_slice.40, bit_slice.39, bit_slice.38, bit_slice.37, bit_slice.36, bit_slice.35, bit_slice.34, bit_slice.33, bit_slice.32, bit_slice.31, bit_slice.30, bit_slice.29, bit_slice.28, bit_slice.27, bit_slice.26, bit_slice.25, bit_slice.24, bit_slice.23, bit_slice.22, bit_slice.21, bit_slice.20, bit_slice.19, bit_slice.18, bit_slice.17, bit_slice.16, bit_slice.15, bit_slice.14, bit_slice.13, bit_slice.12, id=76, pos=0,29,31)
  ret w: bits[32][64] = counted_for(w_init, trip_count=48, stride=1, body=____sha256__sha256_chunk_w_table_counted_for_0_body, id=121)
}

fn ____sha256__sha256_chunk_counted_for_0_body(i: bits[32], __loop_carry: (bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32]), K: bits[32][64], w: bits[32][64]) -> (bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32]) {
  tuple_index.205: bits[32] = tuple_index(__loop_carry, index=4, id=205)
  literal.219: bits[32] = literal(value=6, id=219, pos=0,77,30)
  literal.221: bits[32] = literal(value=11, id=221, pos=0,77,52)
  literal.192: bits[1] = literal(value=1, id=192)
  literal.194: bits[1] = literal(value=1, id=194)
  invoke.220: bits[32] = invoke(tuple_index.205, literal.219, to_apply=__std__rrot__32, id=220, pos=0,77,22)
  invoke.222: bits[32] = invoke(tuple_index.205, literal.221, to_apply=__std__rrot__32, id=222, pos=0,77,44)
  literal.224: bits[32] = literal(value=25, id=224, pos=0,77,75)
  and.195: bits[1] = and(literal.192, literal.194, id=195)
  literal.197: bits[1] = literal(value=1, id=197)
  xor.223: bits[32] = xor(invoke.220, invoke.222, id=223, pos=0,77,33)
  invoke.225: bits[32] = invoke(tuple_index.205, literal.224, to_apply=__std__rrot__32, id=225, pos=0,77,67)
  tuple_index.208: bits[32] = tuple_index(__loop_carry, index=5, id=208)
  not.228: bits[32] = not(tuple_index.205, id=228, pos=0,78,25)
  tuple_index.211: bits[32] = tuple_index(__loop_carry, index=6, id=211)
  and.198: bits[1] = and(and.195, literal.197, id=198)
  literal.200: bits[1] = literal(value=1, id=200)
  tuple_index.214: bits[32] = tuple_index(__loop_carry, index=7, id=214)
  S1: bits[32] = xor(xor.223, invoke.225, id=226, pos=0,77,56)
  and.227: bits[32] = and(tuple_index.205, tuple_index.208, id=227, pos=0,78,16)
  and.229: bits[32] = and(not.228, tuple_index.211, id=229, pos=0,78,29)
  tuple_index.193: bits[32] = tuple_index(__loop_carry, index=0, id=193)
  literal.237: bits[32] = literal(value=2, id=237, pos=0,80,30)
  literal.239: bits[32] = literal(value=13, id=239, pos=0,80,52)
  tuple_index.196: bits[32] = tuple_index(__loop_carry, index=1, id=196)
  tuple_index.199: bits[32] = tuple_index(__loop_carry, index=2, id=199)
  and.201: bits[1] = and(and.198, literal.200, id=201)
  literal.203: bits[1] = literal(value=1, id=203)
  add.231: bits[32] = add(tuple_index.214, S1, id=231, pos=0,79,18)
  ch: bits[32] = xor(and.227, and.229, id=230, pos=0,78,21)
  invoke.238: bits[32] = invoke(tuple_index.193, literal.237, to_apply=__std__rrot__32, id=238, pos=0,80,22)
  invoke.240: bits[32] = invoke(tuple_index.193, literal.239, to_apply=__std__rrot__32, id=240, pos=0,80,44)
  literal.242: bits[32] = literal(value=22, id=242, pos=0,80,75)
  and.245: bits[32] = and(tuple_index.193, tuple_index.196, id=245, pos=0,81,17)
  and.246: bits[32] = and(tuple_index.193, tuple_index.199, id=246, pos=0,81,27)
  and.204: bits[1] = and(and.201, literal.203, id=204)
  literal.206: bits[1] = literal(value=1, id=206)
  add.232: bits[32] = add(add.231, ch, id=232, pos=0,79,23)
  array_index.233: bits[32] = array_index(K, indices=[i], id=233, pos=0,79,31)
  xor.241: bits[32] = xor(invoke.238, invoke.240, id=241, pos=0,80,33)
  invoke.243: bits[32] = invoke(tuple_index.193, literal.242, to_apply=__std__rrot__32, id=243, pos=0,80,67)
  xor.247: bits[32] = xor(and.245, and.246, id=247, pos=0,81,22)
  and.248: bits[32] = and(tuple_index.196, tuple_index.199, id=248, pos=0,81,37)
  and.207: bits[1] = and(and.204, literal.206, id=207)
  literal.209: bits[1] = literal(value=1, id=209)
  add.234: bits[32] = add(add.232, array_index.233, id=234, pos=0,79,28)
  array_index.235: bits[32] = array_index(w, indices=[i], id=235, pos=0,79,38)
  S0: bits[32] = xor(xor.241, invoke.243, id=244, pos=0,80,56)
  maj: bits[32] = xor(xor.247, and.248, id=249, pos=0,81,32)
  and.210: bits[1] = and(and.207, literal.209, id=210)
  literal.212: bits[1] = literal(value=1, id=212)
  temp1: bits[32] = add(add.234, array_index.235, id=236, pos=0,79,35)
  temp2: bits[32] = add(S0, maj, id=250, pos=0,82,19)
  tuple.256: (bits[32], bits[32], bits[32]) = tuple(tuple_index.199, tuple_index.196, tuple_index.193, id=256, pos=0,85,20)
  tuple_index.202: bits[32] = tuple_index(__loop_carry, index=3, id=202)
  tuple.251: (bits[32], bits[32], bits[32]) = tuple(tuple_index.211, tuple_index.208, tuple_index.205, id=251, pos=0,83,20)
  and.213: bits[1] = and(and.210, literal.212, id=213)
  literal.215: bits[1] = literal(value=1, id=215)
  a: bits[32] = add(temp1, temp2, id=260, pos=0,86,18)
  b: bits[32] = tuple_index(tuple.256, index=2, id=259, pos=0,85,15)
  c: bits[32] = tuple_index(tuple.256, index=1, id=258, pos=0,85,12)
  d: bits[32] = tuple_index(tuple.256, index=0, id=257, pos=0,85,9)
  e: bits[32] = add(tuple_index.202, temp1, id=255, pos=0,84,14)
  f: bits[32] = tuple_index(tuple.251, index=2, id=254, pos=0,83,15)
  g: bits[32] = tuple_index(tuple.251, index=1, id=253, pos=0,83,12)
  h: bits[32] = tuple_index(tuple.251, index=0, id=252, pos=0,83,9)
  and.216: bits[1] = and(and.213, literal.215, id=216)
  ret tuple.261: (bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32]) = tuple(a, b, c, d, e, f, g, h, id=261, pos=0,87,4)
}

fn __sha256__sha256_chunk(chunk: bits[512], digest_init: (bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32])) -> (bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32]) {
  literal.125: bits[32] = literal(value=1116352408, id=125, pos=0,56,9)
  literal.126: bits[32] = literal(value=1899447441, id=126, pos=0,56,25)
  literal.127: bits[32] = literal(value=3049323471, id=127, pos=0,56,41)
  literal.128: bits[32] = literal(value=3921009573, id=128, pos=0,56,57)
  literal.129: bits[32] = literal(value=961987163, id=129, pos=0,57,9)
  literal.130: bits[32] = literal(value=1508970993, id=130, pos=0,57,25)
  literal.131: bits[32] = literal(value=2453635748, id=131, pos=0,57,41)
  literal.132: bits[32] = literal(value=2870763221, id=132, pos=0,57,57)
  literal.133: bits[32] = literal(value=3624381080, id=133, pos=0,58,9)
  literal.134: bits[32] = literal(value=310598401, id=134, pos=0,58,25)
  literal.135: bits[32] = literal(value=607225278, id=135, pos=0,58,41)
  literal.136: bits[32] = literal(value=1426881987, id=136, pos=0,58,57)
  literal.137: bits[32] = literal(value=1925078388, id=137, pos=0,59,9)
  literal.138: bits[32] = literal(value=2162078206, id=138, pos=0,59,25)
  literal.139: bits[32] = literal(value=2614888103, id=139, pos=0,59,41)
  literal.140: bits[32] = literal(value=3248222580, id=140, pos=0,59,57)
  literal.141: bits[32] = literal(value=3835390401, id=141, pos=0,60,9)
  literal.142: bits[32] = literal(value=4022224774, id=142, pos=0,60,25)
  literal.143: bits[32] = literal(value=264347078, id=143, pos=0,60,41)
  literal.144: bits[32] = literal(value=604807628, id=144, pos=0,60,57)
  literal.145: bits[32] = literal(value=770255983, id=145, pos=0,61,9)
  literal.146: bits[32] = literal(value=1249150122, id=146, pos=0,61,25)
  literal.147: bits[32] = literal(value=1555081692, id=147, pos=0,61,41)
  literal.148: bits[32] = literal(value=1996064986, id=148, pos=0,61,57)
  literal.149: bits[32] = literal(value=2554220882, id=149, pos=0,62,9)
  literal.150: bits[32] = literal(value=2821834349, id=150, pos=0,62,25)
  literal.151: bits[32] = literal(value=2952996808, id=151, pos=0,62,41)
  literal.152: bits[32] = literal(value=3210313671, id=152, pos=0,62,57)
  literal.153: bits[32] = literal(value=3336571891, id=153, pos=0,63,9)
  literal.154: bits[32] = literal(value=3584528711, id=154, pos=0,63,25)
  literal.155: bits[32] = literal(value=113926993, id=155, pos=0,63,41)
  literal.156: bits[32] = literal(value=338241895, id=156, pos=0,63,57)
  literal.157: bits[32] = literal(value=666307205, id=157, pos=0,64,9)
  literal.158: bits[32] = literal(value=773529912, id=158, pos=0,64,25)
  literal.159: bits[32] = literal(value=1294757372, id=159, pos=0,64,41)
  literal.160: bits[32] = literal(value=1396182291, id=160, pos=0,64,57)
  literal.161: bits[32] = literal(value=1695183700, id=161, pos=0,65,9)
  literal.162: bits[32] = literal(value=1986661051, id=162, pos=0,65,25)
  literal.163: bits[32] = literal(value=2177026350, id=163, pos=0,65,41)
  literal.164: bits[32] = literal(value=2456956037, id=164, pos=0,65,57)
  literal.165: bits[32] = literal(value=2730485921, id=165, pos=0,66,9)
  literal.166: bits[32] = literal(value=2820302411, id=166, pos=0,66,25)
  literal.167: bits[32] = literal(value=3259730800, id=167, pos=0,66,41)
  literal.168: bits[32] = literal(value=3345764771, id=168, pos=0,66,57)
  literal.169: bits[32] = literal(value=3516065817, id=169, pos=0,67,9)
  literal.170: bits[32] = literal(value=3600352804, id=170, pos=0,67,25)
  literal.171: bits[32] = literal(value=4094571909, id=171, pos=0,67,41)
  literal.172: bits[32] = literal(value=275423344, id=172, pos=0,67,57)
  literal.173: bits[32] = literal(value=430227734, id=173, pos=0,68,9)
  literal.174: bits[32] = literal(value=506948616, id=174, pos=0,68,25)
  literal.175: bits[32] = literal(value=659060556, id=175, pos=0,68,41)
  literal.176: bits[32] = literal(value=883997877, id=176, pos=0,68,57)
  literal.177: bits[32] = literal(value=958139571, id=177, pos=0,69,9)
  literal.178: bits[32] = literal(value=1322822218, id=178, pos=0,69,25)
  literal.179: bits[32] = literal(value=1537002063, id=179, pos=0,69,41)
  literal.180: bits[32] = literal(value=1747873779, id=180, pos=0,69,57)
  literal.181: bits[32] = literal(value=1955562222, id=181, pos=0,70,9)
  literal.182: bits[32] = literal(value=2024104815, id=182, pos=0,70,25)
  literal.183: bits[32] = literal(value=2227730452, id=183, pos=0,70,41)
  literal.184: bits[32] = literal(value=2361852424, id=184, pos=0,70,57)
  literal.185: bits[32] = literal(value=2428436474, id=185, pos=0,71,9)
  literal.186: bits[32] = literal(value=2756734187, id=186, pos=0,71,25)
  literal.187: bits[32] = literal(value=3204031479, id=187, pos=0,71,41)
  literal.188: bits[32] = literal(value=3329325298, id=188, pos=0,71,57)
  K: bits[32][64] = array(literal.125, literal.126, literal.127, literal.128, literal.129, literal.130, literal.131, literal.132, literal.133, literal.134, literal.135, literal.136, literal.137, literal.138, literal.139, literal.140, literal.141, literal.142, literal.143, literal.144, literal.145, literal.146, literal.147, literal.148, literal.149, literal.150, literal.151, literal.152, literal.153, literal.154, literal.155, literal.156, literal.157, literal.158, literal.159, literal.160, literal.161, literal.162, literal.163, literal.164, literal.165, literal.166, literal.167, literal.168, literal.169, literal.170, literal.171, literal.172, literal.173, literal.174, literal.175, literal.176, literal.177, literal.178, literal.179, literal.180, literal.181, literal.182, literal.183, literal.184, literal.185, literal.186, literal.187, literal.188, id=189, pos=0,55,20)
  w: bits[32][64] = invoke(chunk, to_apply=__sha256__sha256_chunk_w_table, id=124, pos=0,52,39)
  counted_for.262: (bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32]) = counted_for(digest_init, trip_count=64, stride=1, body=____sha256__sha256_chunk_counted_for_0_body, invariant_args=[K, w], id=262)
  h0: bits[32] = tuple_index(digest_init, index=0, id=271, pos=0,91,7)
  a: bits[32] = tuple_index(counted_for.262, index=0, id=263, pos=0,75,7)
  h1: bits[32] = tuple_index(digest_init, index=1, id=272, pos=0,91,11)
  b: bits[32] = tuple_index(counted_for.262, index=1, id=264, pos=0,75,10)
  h2: bits[32] = tuple_index(digest_init, index=2, id=273, pos=0,91,15)
  c: bits[32] = tuple_index(counted_for.262, index=2, id=265, pos=0,75,13)
  h3: bits[32] = tuple_index(digest_init, index=3, id=274, pos=0,91,19)
  d: bits[32] = tuple_index(counted_for.262, index=3, id=266, pos=0,75,16)
  h4: bits[32] = tuple_index(digest_init, index=4, id=275, pos=0,91,23)
  e: bits[32] = tuple_index(counted_for.262, index=4, id=267, pos=0,75,19)
  h5: bits[32] = tuple_index(digest_init, index=5, id=276, pos=0,91,27)
  f: bits[32] = tuple_index(counted_for.262, index=5, id=268, pos=0,75,22)
  h6: bits[32] = tuple_index(digest_init, index=6, id=277, pos=0,91,31)
  g: bits[32] = tuple_index(counted_for.262, index=6, id=269, pos=0,75,25)
  h7: bits[32] = tuple_index(digest_init, index=7, id=278, pos=0,91,35)
  h: bits[32] = tuple_index(counted_for.262, index=7, id=270, pos=0,75,28)
  add.279: bits[32] = add(h0, a, id=279, pos=0,92,6)
  add.280: bits[32] = add(h1, b, id=280, pos=0,92,14)
  add.281: bits[32] = add(h2, c, id=281, pos=0,92,22)
  add.282: bits[32] = add(h3, d, id=282, pos=0,92,30)
  add.283: bits[32] = add(h4, e, id=283, pos=0,92,38)
  add.284: bits[32] = add(h5, f, id=284, pos=0,92,46)
  add.285: bits[32] = add(h6, g, id=285, pos=0,92,53)
  add.286: bits[32] = add(h7, h, id=286, pos=0,92,60)
  ret tuple.287: (bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32]) = tuple(add.279, add.280, add.281, add.282, add.283, add.284, add.285, add.286, id=287, pos=0,92,2)
}

fn __std__ceil_div__32(x: bits[32], y: bits[32]) -> bits[32] {
  literal.291: bits[32] = literal(value=1, id=291, pos=0,182,25)
  sub.292: bits[32] = sub(x, literal.291, id=292, pos=0,182,17)
  literal.296: bits[32] = literal(value=0, id=296, pos=0,183,15)
  udiv.293: bits[32] = udiv(sub.292, y, id=293, pos=0,182,28)
  literal.294: bits[32] = literal(value=1, id=294, pos=0,182,40)
  ugt.297: bits[1] = ugt(x, literal.296, id=297, pos=0,183,7)
  literal.298: bits[32] = literal(value=0, id=298, pos=0,183,40)
  usual: bits[32] = add(udiv.293, literal.294, id=295, pos=0,182,32)
  N: bits[32] = literal(value=32, id=290, pos=0,181,16)
  ret sel.299: bits[32] = sel(ugt.297, cases=[literal.298, usual], id=299, pos=0,183,2)
}

fn __std__round_up_to_nearest(x: bits[32], y: bits[32]) -> bits[32] {
  invoke.302: bits[32] = invoke(x, y, to_apply=__std__ceil_div__32, id=302, pos=0,209,11)
  umul.303: bits[32] = umul(invoke.302, y, id=303, pos=0,209,18)
  ret zero_ext.304: bits[32] = zero_ext(umul.303, new_bit_count=32, id=304)
}

fn __sha256__compute_pad_bits(bit_count: bits[32]) -> bits[32] {
  literal.306: bits[32] = literal(value=512, id=306, pos=0,98,42)
  invoke.307: bits[32] = invoke(bit_count, literal.306, to_apply=__std__round_up_to_nearest, id=307, pos=0,98,26)
  ret sub.308: bits[32] = sub(invoke.307, bit_count, id=308, pos=0,98,46)
}

fn __sha256__sha256(message: bits[512]) -> (bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32]) {
  literal.310: bits[32] = literal(value=1779033703, id=310, pos=0,122,9)
  literal.311: bits[32] = literal(value=3144134277, id=311, pos=0,122,25)
  literal.312: bits[32] = literal(value=1013904242, id=312, pos=0,122,41)
  literal.313: bits[32] = literal(value=2773480762, id=313, pos=0,122,57)
  literal.314: bits[32] = literal(value=1359893119, id=314, pos=0,123,9)
  literal.315: bits[32] = literal(value=2600822924, id=315, pos=0,123,25)
  literal.316: bits[32] = literal(value=528734635, id=316, pos=0,123,41)
  literal.317: bits[32] = literal(value=1541459225, id=317, pos=0,123,57)
  digest_init: (bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32]) = tuple(literal.310, literal.311, literal.312, literal.313, literal.314, literal.315, literal.316, literal.317, id=318, pos=0,122,4)
  ret invoke.319: (bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32]) = invoke(message, digest_init, to_apply=__sha256__sha256_chunk, id=319, pos=0,132,14)
}

fn __sha256__main(message: bits[512]) -> (bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32]) {
  ret invoke.321: (bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32]) = invoke(message, to_apply=__sha256__sha256, id=321, pos=0,136,8)
}
