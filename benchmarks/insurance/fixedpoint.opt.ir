package fixedpoint

fn __fixedpoint__fixedpt_mul(a: bits[32], b: bits[32]) -> bits[32] {
  umul.118: bits[64] = umul(a, b, id=118, pos=0,9,15)
  ret bit_slice.107: bits[32] = bit_slice(umul.118, start=16, width=32, id=107)
}

fn __fixedpoint__fixedpt_div(a: bits[32], b: bits[32]) -> bits[32] {
  literal.111: bits[16] = literal(value=0, id=111, pos=0,13,15)
  literal.324: bits[16] = literal(value=0, id=324, pos=0,13,15)
  literal.93: bits[32] = literal(value=0, id=93)
  concat.110: bits[64] = concat(literal.111, a, literal.324, id=110, pos=0,13,15)
  concat.94: bits[64] = concat(literal.93, b, id=94)
  udiv.19: bits[64] = udiv(concat.110, concat.94, id=19, pos=0,13,44)
  ret bit_slice.20: bits[32] = bit_slice(udiv.19, start=0, width=32, id=20)
}

fn __std__abs__8(x: bits[8]) -> bits[8] {
  bit_slice.101: bits[1] = bit_slice(x, start=7, width=1, id=101, pos=0,121,7)
  neg.25: bits[8] = neg(x, id=25, pos=0,121,22)
  ret sel.26: bits[8] = sel(bit_slice.101, cases=[x, neg.25], id=26, pos=0,121,2)
}

fn ____fixedpoint__fixedpt_pow_counted_for_0_body(i: bits[32], __loop_carry: (bits[8], bits[32], bits[32])) -> (bits[8], bits[32], bits[32]) {
  tuple_index.45: bits[32] = tuple_index(__loop_carry, index=2, id=45)
  tuple_index.42: bits[32] = tuple_index(__loop_carry, index=1, id=42)
  tuple_index.39: bits[8] = tuple_index(__loop_carry, index=0, id=39)
  umul.142: bits[64] = umul(tuple_index.45, tuple_index.42, id=142, pos=0,9,15)
  bit_slice.102: bits[7] = bit_slice(tuple_index.39, start=1, width=7, id=102, pos=0,24,7)
  umul.144: bits[64] = umul(tuple_index.42, tuple_index.42, id=144, pos=0,9,15)
  bit_slice.112: bits[1] = bit_slice(tuple_index.39, start=0, width=1, id=112, pos=0,22,23)
  bit_slice.143: bits[32] = bit_slice(umul.142, start=16, width=32, id=143)
  sign_ext.103: bits[8] = sign_ext(bit_slice.102, new_bit_count=8, id=103, pos=0,24,7)
  bit_slice.145: bits[32] = bit_slice(umul.144, start=16, width=32, id=145)
  result: bits[32] = sel(bit_slice.112, cases=[tuple_index.45, bit_slice.143], id=53, pos=0,22,17)
  ret tuple.57: (bits[8], bits[32], bits[32]) = tuple(sign_ext.103, bit_slice.145, result, id=57, pos=0,24,4)
}

fn __fixedpoint__fixedpt_pow(p: bits[32], b: bits[8]) -> bits[32] {
  bit_slice.146: bits[1] = bit_slice(b, start=7, width=1, id=146, pos=0,121,7)
  neg.147: bits[8] = neg(b, id=147, pos=0,121,22)
  b2: bits[8] = sel(bit_slice.146, cases=[b, neg.147], id=148, pos=0,121,2)
  bit_slice.161: bits[1] = bit_slice(b2, start=0, width=1, id=161, pos=0,22,23)
  result: bits[32] = literal(value=65536, id=86, pos=0,6,29)
  umul.160: bits[64] = umul(p, p, id=160, pos=0,9,15)
  result__2: bits[32] = sel(bit_slice.161, cases=[result, p], id=165, pos=0,22,17)
  bit_slice.164: bits[32] = bit_slice(umul.160, start=16, width=32, id=164)
  umul.170: bits[64] = umul(result__2, bit_slice.164, id=170, pos=0,9,15)
  bit_slice.272: bits[1] = bit_slice(b2, start=1, width=1, id=272, pos=0,22,23)
  bit_slice.174: bits[32] = bit_slice(umul.170, start=16, width=32, id=174)
  umul.172: bits[64] = umul(bit_slice.164, bit_slice.164, id=172, pos=0,9,15)
  result__3: bits[32] = sel(bit_slice.272, cases=[result__2, bit_slice.174], id=177, pos=0,22,17)
  bit_slice.176: bits[32] = bit_slice(umul.172, start=16, width=32, id=176)
  umul.182: bits[64] = umul(result__3, bit_slice.176, id=182, pos=0,9,15)
  bit_slice.285: bits[1] = bit_slice(b2, start=2, width=1, id=285, pos=0,22,23)
  bit_slice.186: bits[32] = bit_slice(umul.182, start=16, width=32, id=186)
  umul.184: bits[64] = umul(bit_slice.176, bit_slice.176, id=184, pos=0,9,15)
  result__4: bits[32] = sel(bit_slice.285, cases=[result__3, bit_slice.186], id=189, pos=0,22,17)
  bit_slice.188: bits[32] = bit_slice(umul.184, start=16, width=32, id=188)
  umul.194: bits[64] = umul(result__4, bit_slice.188, id=194, pos=0,9,15)
  bit_slice.296: bits[1] = bit_slice(b2, start=3, width=1, id=296, pos=0,22,23)
  bit_slice.198: bits[32] = bit_slice(umul.194, start=16, width=32, id=198)
  umul.196: bits[64] = umul(bit_slice.188, bit_slice.188, id=196, pos=0,9,15)
  result__5: bits[32] = sel(bit_slice.296, cases=[result__4, bit_slice.198], id=201, pos=0,22,17)
  bit_slice.200: bits[32] = bit_slice(umul.196, start=16, width=32, id=200)
  umul.206: bits[64] = umul(result__5, bit_slice.200, id=206, pos=0,9,15)
  bit_slice.305: bits[1] = bit_slice(b2, start=4, width=1, id=305, pos=0,22,23)
  bit_slice.210: bits[32] = bit_slice(umul.206, start=16, width=32, id=210)
  umul.208: bits[64] = umul(bit_slice.200, bit_slice.200, id=208, pos=0,9,15)
  result__6: bits[32] = sel(bit_slice.305, cases=[result__5, bit_slice.210], id=213, pos=0,22,17)
  bit_slice.212: bits[32] = bit_slice(umul.208, start=16, width=32, id=212)
  umul.218: bits[64] = umul(result__6, bit_slice.212, id=218, pos=0,9,15)
  bit_slice.312: bits[1] = bit_slice(b2, start=5, width=1, id=312, pos=0,22,23)
  bit_slice.222: bits[32] = bit_slice(umul.218, start=16, width=32, id=222)
  umul.220: bits[64] = umul(bit_slice.212, bit_slice.212, id=220, pos=0,9,15)
  result__7: bits[32] = sel(bit_slice.312, cases=[result__6, bit_slice.222], id=225, pos=0,22,17)
  bit_slice.224: bits[32] = bit_slice(umul.220, start=16, width=32, id=224)
  umul.230: bits[64] = umul(result__7, bit_slice.224, id=230, pos=0,9,15)
  bit_slice.317: bits[1] = bit_slice(b2, start=6, width=1, id=317, pos=0,22,23)
  bit_slice.234: bits[32] = bit_slice(umul.230, start=16, width=32, id=234)
  umul.232: bits[64] = umul(bit_slice.224, bit_slice.224, id=232, pos=0,9,15)
  result__8: bits[32] = sel(bit_slice.317, cases=[result__7, bit_slice.234], id=237, pos=0,22,17)
  bit_slice.236: bits[32] = bit_slice(umul.232, start=16, width=32, id=236)
  umul.242: bits[64] = umul(result__8, bit_slice.236, id=242, pos=0,9,15)
  bit_slice.320: bits[1] = bit_slice(b2, start=7, width=1, id=320, pos=0,22,23)
  bit_slice.246: bits[32] = bit_slice(umul.242, start=16, width=32, id=246)
  literal.150: bits[32] = literal(value=0, id=150)
  result__9: bits[32] = sel(bit_slice.320, cases=[result__8, bit_slice.246], id=249, pos=0,22,17)
  literal.251: bits[64] = literal(value=4294967296, id=251, pos=0,13,15)
  concat.152: bits[64] = concat(literal.150, result__9, id=152)
  udiv.153: bits[64] = udiv(literal.251, concat.152, id=153, pos=0,13,44)
  bit_slice.154: bits[32] = bit_slice(udiv.153, start=0, width=32, id=154)
  ret sel.64: bits[32] = sel(bit_slice.146, cases=[result__9, bit_slice.154], id=64, pos=0,27,2)
}
