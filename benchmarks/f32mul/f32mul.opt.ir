package f32mul

fn __f32mul__main(x: (bits[1], bits[8], bits[23]), y: (bits[1], bits[8], bits[23])) -> (bits[1], bits[8], bits[23]) {
  literal.522: bits[1] = literal(value=0, id=522)
  x_fraction__3: bits[23] = tuple_index(x, index=2, id=523, pos=0,61,21)
  x_bexp__1: bits[8] = tuple_index(x, index=1, id=518, pos=0,30,3)
  literal.660: bits[8] = literal(value=0, id=660, pos=0,30,23)
  literal.662: bits[1] = literal(value=0, id=662)
  y_fraction__3: bits[23] = tuple_index(y, index=2, id=525, pos=0,62,21)
  y_bexp__1: bits[8] = tuple_index(y, index=1, id=520, pos=0,30,3)
  literal.661: bits[8] = literal(value=0, id=661, pos=0,30,23)
  concat.527: bits[24] = concat(literal.522, x_fraction__3, id=527)
  literal.528: bits[24] = literal(value=8388608, id=528, pos=0,61,76)
  ne.651: bits[1] = ne(x_bexp__1, literal.660, id=651, pos=0,65,19)
  concat.530: bits[24] = concat(literal.662, y_fraction__3, id=530)
  literal.668: bits[24] = literal(value=8388608, id=668, pos=0,61,76)
  ne.652: bits[1] = ne(y_bexp__1, literal.661, id=652, pos=0,66,19)
  literal.663: bits[1] = literal(value=0, id=663)
  literal.664: bits[1] = literal(value=0, id=664)
  x_fraction__4: bits[24] = or(concat.527, literal.528, id=534, pos=0,61,53)
  sign_ext.535: bits[24] = sign_ext(ne.651, new_bit_count=24, id=535, pos=0,65,19)
  y_fraction__4: bits[24] = or(concat.530, literal.668, id=536, pos=0,62,53)
  sign_ext.537: bits[24] = sign_ext(ne.652, new_bit_count=24, id=537, pos=0,66,19)
  concat.538: bits[9] = concat(literal.663, x_bexp__1, id=538)
  concat.539: bits[9] = concat(literal.664, y_bexp__1, id=539)
  literal.519: bits[8] = literal(value=0, id=519, pos=0,30,23)
  literal.659: bits[8] = literal(value=0, id=659, pos=0,30,23)
  x_fraction__6: bits[24] = and(x_fraction__4, sign_ext.535, id=540, pos=0,65,19)
  y_fraction__5: bits[24] = and(y_fraction__4, sign_ext.537, id=541, pos=0,66,19)
  literal.665: bits[1] = literal(value=0, id=665)
  add.542: bits[9] = add(concat.538, concat.539, id=542, pos=0,78,39)
  eq.524: bits[1] = eq(x_bexp__1, literal.519, id=524, pos=0,30,9)
  eq.526: bits[1] = eq(y_bexp__1, literal.659, id=526, pos=0,30,9)
  fraction: bits[48] = umul(x_fraction__6, y_fraction__5, id=543, pos=0,69,28)
  concat.544: bits[10] = concat(literal.665, add.542, id=544, pos=0,78,39)
  literal.545: bits[10] = literal(value=897, id=545, pos=0,78,68)
  nor.546: bits[1] = nor(eq.524, eq.526, id=546, pos=0,87,12)
  bit_slice.547: bits[1] = bit_slice(fraction, start=47, width=1, id=547, pos=0,93,31)
  literal.548: bits[47] = literal(value=0, id=548)
  bit_slice.549: bits[1] = bit_slice(fraction, start=0, width=1, id=549, pos=0,98,23)
  exp: bits[10] = add(concat.544, literal.545, id=550, pos=0,78,68)
  sign_ext.551: bits[10] = sign_ext(nor.546, new_bit_count=10, id=551, pos=0,87,12)
  literal.552: bits[9] = literal(value=0, id=552)
  fraction__1: bits[48] = shrl(fraction, bit_slice.547, id=553, pos=0,99,26)
  sticky: bits[48] = concat(literal.548, bit_slice.549, id=554)
  exp__1: bits[10] = and(exp, sign_ext.551, id=555, pos=0,87,12)
  concat.556: bits[10] = concat(literal.552, bit_slice.547, id=556)
  fraction__2: bits[48] = or(fraction__1, sticky, id=557, pos=0,100,26)
  exp__2: bits[10] = add(exp__1, concat.556, id=558, pos=0,103,16)
  literal.559: bits[10] = literal(value=0, id=559, pos=0,114,42)
  literal.666: bits[1] = literal(value=0, id=666)
  bit_slice.560: bits[47] = bit_slice(fraction__2, start=1, width=47, id=560, pos=0,114,55)
  sle.561: bits[1] = sle(exp__2, literal.559, id=561, pos=0,114,24)
  concat.562: bits[48] = concat(literal.666, bit_slice.560, id=562, pos=0,114,55)
  literal.669: bits[47] = literal(value=0, id=669)
  bit_slice.563: bits[1] = bit_slice(fraction__2, start=0, width=1, id=563, pos=0,113,23)
  fraction__3: bits[48] = sel(sle.561, cases=[fraction__2, concat.562], id=564, pos=0,114,17)
  sticky__1: bits[48] = concat(literal.669, bit_slice.563, id=565)
  fraction__4: bits[48] = or(fraction__3, sticky__1, id=566, pos=0,115,26)
  bit_slice.567: bits[22] = bit_slice(fraction__4, start=0, width=22, id=567, pos=0,130,15)
  literal.568: bits[22] = literal(value=0, id=568, pos=0,130,77)
  literal.671: bits[22] = literal(value=0, id=671, pos=0,130,77)
  bit_slice.569: bits[1] = bit_slice(fraction__4, start=22, width=1, id=569, pos=0,129,14)
  ne.570: bits[1] = ne(bit_slice.567, literal.568, id=570, pos=0,130,48)
  eq.571: bits[1] = eq(bit_slice.567, literal.671, id=571, pos=0,127,48)
  bit_slice.572: bits[1] = bit_slice(fraction__4, start=23, width=1, id=572, pos=0,132,54)
  literal.667: bits[1] = literal(value=0, id=667)
  fraction__5: bits[23] = bit_slice(fraction__4, start=23, width=23, id=573)
  greater_than_half_way: bits[1] = and(bit_slice.569, ne.570, id=574, pos=0,129,66)
  and.575: bits[1] = and(bit_slice.569, eq.571, bit_slice.572, id=575, pos=0,132,44)
  fraction__6: bits[24] = concat(literal.667, fraction__5, id=576)
  literal.577: bits[24] = literal(value=1, id=577, pos=0,139,67)
  do_round_up: bits[1] = or(greater_than_half_way, and.575, id=578, pos=0,132,28)
  add.579: bits[24] = add(fraction__6, literal.577, id=579, pos=0,139,43)
  fraction__7: bits[24] = sel(do_round_up, cases=[fraction__6, add.579], id=580, pos=0,139,17)
  literal.581: bits[10] = literal(value=1, id=581, pos=0,143,52)
  bit_slice.582: bits[1] = bit_slice(fraction__7, start=23, width=1, id=582, pos=0,143,23)
  add.583: bits[10] = add(exp__2, literal.581, id=583, pos=0,143,35)
  exp__3: bits[10] = sel(bit_slice.582, cases=[exp__2, add.583], id=584, pos=0,143,12)
  literal.670: bits[10] = literal(value=0, id=670, pos=0,114,42)
  sgt.585: bits[1] = sgt(exp__3, literal.670, id=585, pos=0,153,19)
  high_exp: bits[8] = literal(value=255, id=587, pos=0,446,27)
  literal.589: bits[23] = literal(value=0, id=589, pos=0,446,73)
  high_exp__1: bits[8] = literal(value=255, id=672, pos=0,446,27)
  literal.674: bits[23] = literal(value=0, id=674, pos=0,446,73)
  result_exp: bits[9] = bit_slice(exp__3, start=0, width=9, id=594)
  sign_ext.595: bits[9] = sign_ext(sgt.585, new_bit_count=9, id=595, pos=0,153,19)
  eq.596: bits[1] = eq(x_bexp__1, high_exp, id=596, pos=0,446,10)
  eq.597: bits[1] = eq(x_fraction__3, literal.589, id=597, pos=0,446,52)
  eq.598: bits[1] = eq(y_bexp__1, high_exp__1, id=598, pos=0,446,10)
  eq.599: bits[1] = eq(y_fraction__3, literal.674, id=599, pos=0,446,52)
  result_exp__1: bits[9] = and(result_exp, sign_ext.595, id=600, pos=0,153,19)
  literal.675: bits[23] = literal(value=0, id=675, pos=0,446,73)
  literal.676: bits[23] = literal(value=0, id=676, pos=0,446,73)
  and.609: bits[1] = and(eq.596, eq.597, id=609, pos=0,446,38)
  and.610: bits[1] = and(eq.598, eq.599, id=610, pos=0,446,38)
  bit_slice.611: bits[1] = bit_slice(result_exp__1, start=0, width=1, id=611, pos=0,153,19)
  bit_slice.612: bits[1] = bit_slice(result_exp__1, start=1, width=1, id=612, pos=0,153,19)
  bit_slice.613: bits[1] = bit_slice(result_exp__1, start=2, width=1, id=613, pos=0,153,19)
  bit_slice.614: bits[1] = bit_slice(result_exp__1, start=3, width=1, id=614, pos=0,153,19)
  bit_slice.615: bits[1] = bit_slice(result_exp__1, start=4, width=1, id=615, pos=0,153,19)
  bit_slice.616: bits[1] = bit_slice(result_exp__1, start=5, width=1, id=616, pos=0,153,19)
  bit_slice.617: bits[1] = bit_slice(result_exp__1, start=6, width=1, id=617, pos=0,153,19)
  bit_slice.618: bits[1] = bit_slice(result_exp__1, start=7, width=1, id=618, pos=0,153,19)
  ne.620: bits[1] = ne(x_fraction__3, literal.675, id=620, pos=0,451,52)
  ne.622: bits[1] = ne(y_fraction__3, literal.676, id=622, pos=0,451,52)
  has_0_arg: bits[1] = or(eq.524, eq.526, id=623, pos=0,169,29)
  has_inf_arg: bits[1] = or(and.609, and.610, id=624, pos=0,172,60)
  bit_slice.625: bits[1] = bit_slice(result_exp__1, start=8, width=1, id=625, pos=0,153,19)
  and.626: bits[1] = and(bit_slice.611, bit_slice.612, bit_slice.613, bit_slice.614, bit_slice.615, bit_slice.616, bit_slice.617, bit_slice.618, id=626, pos=0,153,19)
  and.627: bits[1] = and(eq.596, ne.620, id=627, pos=0,451,38)
  and.628: bits[1] = and(eq.598, ne.622, id=628, pos=0,451,38)
  and.629: bits[1] = and(has_0_arg, has_inf_arg, id=629, pos=0,174,48)
  nor.630: bits[1] = nor(bit_slice.625, and.626, id=630, pos=0,159,33)
  nor.631: bits[1] = nor(and.609, and.610, id=631, pos=0,165,24)
  is_result_nan: bits[1] = or(and.627, and.628, and.629, id=632, pos=0,174,34)
  x_sign__2: bits[1] = tuple_index(x, index=0, id=633, pos=0,147,21)
  y_sign__2: bits[1] = tuple_index(y, index=0, id=634, pos=0,147,31)
  not.635: bits[1] = not(nor.630, id=635, pos=0,164,19)
  result_fraction: bits[23] = bit_slice(fraction__7, start=0, width=23, id=636)
  sign_ext.637: bits[23] = sign_ext(sgt.585, new_bit_count=23, id=637, pos=0,154,24)
  sign_ext.638: bits[23] = sign_ext(nor.630, new_bit_count=23, id=638, pos=0,158,24)
  sign_ext.639: bits[23] = sign_ext(nor.631, new_bit_count=23, id=639, pos=0,165,24)
  not.640: bits[1] = not(is_result_nan, id=640, pos=0,178,20)
  result_sign: bits[1] = xor(x_sign__2, y_sign__2, id=641, pos=0,147,27)
  or.642: bits[1] = or(is_result_nan, has_inf_arg, not.635, id=642, pos=0,175,19)
  bit_slice.643: bits[8] = bit_slice(result_exp__1, start=0, width=8, id=643)
  high_exp__2: bits[8] = literal(value=255, id=673, pos=0,446,27)
  result_fraction__3: bits[23] = and(result_fraction, sign_ext.637, sign_ext.638, sign_ext.639, id=645, pos=0,165,24)
  nan_fraction: bits[23] = literal(value=4194304, id=646, pos=0,176,39)
  result_sign__2: bits[1] = and(not.640, result_sign, id=647, pos=0,178,20)
  result_exp__4: bits[8] = sel(or.642, cases=[bit_slice.643, high_exp__2], id=648, pos=0,175,19)
  result_fraction__4: bits[23] = sel(is_result_nan, cases=[result_fraction__3, nan_fraction], id=649, pos=0,177,24)
  ret tuple.650: (bits[1], bits[8], bits[23]) = tuple(result_sign__2, result_exp__4, result_fraction__4, id=650, pos=0,180,30)
}
