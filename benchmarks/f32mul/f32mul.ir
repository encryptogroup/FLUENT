package f32mul

fn __xls_modules_apfloat_mul_2__is_zero__8_23(x: (bits[1], bits[8], bits[23])) -> bits[1] {
  x_bexp: bits[8] = tuple_index(x, index=1, id=4, pos=0,30,3)
  literal.5: bits[8] = literal(value=0, id=5, pos=0,30,23)
  EXP_SZ: bits[32] = literal(value=8, id=2, pos=0,29,11)
  FRACTION_SZ: bits[32] = literal(value=23, id=3, pos=0,29,24)
  ret eq.6: bits[1] = eq(x_bexp, literal.5, id=6, pos=0,30,9)
}

fn __std__mask_bits__8() -> bits[8] {
  literal.8: bits[8] = literal(value=0, id=8, pos=0,365,11)
  X: bits[32] = literal(value=8, id=7, pos=0,364,17)
  ret not.9: bits[8] = not(literal.8, id=9, pos=0,365,2)
}

fn __apfloat__is_inf__8_23(x: (bits[1], bits[8], bits[23])) -> bits[1] {
  x_bexp: bits[8] = tuple_index(x, index=1, id=13, pos=0,446,4)
  invoke.14: bits[8] = invoke(to_apply=__std__mask_bits__8, id=14, pos=0,446,27)
  x_fraction: bits[23] = tuple_index(x, index=2, id=16, pos=0,446,42)
  literal.17: bits[23] = literal(value=0, id=17, pos=0,446,73)
  eq.15: bits[1] = eq(x_bexp, invoke.14, id=15, pos=0,446,10)
  eq.18: bits[1] = eq(x_fraction, literal.17, id=18, pos=0,446,52)
  EXP_SZ: bits[32] = literal(value=8, id=11, pos=0,445,14)
  FRACTION_SZ: bits[32] = literal(value=23, id=12, pos=0,445,26)
  ret and.19: bits[1] = and(eq.15, eq.18, id=19, pos=0,446,38)
}

fn __apfloat__is_nan__8_23(x: (bits[1], bits[8], bits[23])) -> bits[1] {
  x_bexp: bits[8] = tuple_index(x, index=1, id=23, pos=0,451,4)
  invoke.24: bits[8] = invoke(to_apply=__std__mask_bits__8, id=24, pos=0,451,27)
  x_fraction: bits[23] = tuple_index(x, index=2, id=26, pos=0,451,42)
  literal.27: bits[23] = literal(value=0, id=27, pos=0,451,73)
  eq.25: bits[1] = eq(x_bexp, invoke.24, id=25, pos=0,451,10)
  ne.28: bits[1] = ne(x_fraction, literal.27, id=28, pos=0,451,52)
  EXP_SZ: bits[32] = literal(value=8, id=21, pos=0,450,14)
  FRACTION_SZ: bits[32] = literal(value=23, id=22, pos=0,450,26)
  ret and.29: bits[1] = and(eq.25, ne.28, id=29, pos=0,451,38)
}

fn __xls_modules_apfloat_mul_2__apfloat_mul_2__8_22_23_24_10_24_9_48(x: (bits[1], bits[8], bits[23]), y: (bits[1], bits[8], bits[23])) -> (bits[1], bits[8], bits[23]) {
  FRACTION_SZ: bits[32] = literal(value=23, id=33, pos=0,51,4)
  x_fraction: bits[23] = tuple_index(x, index=2, id=40, pos=0,61,21)
  literal.42: bits[48] = literal(value=1, id=42, pos=0,61,74)
  zero_ext.43: bits[48] = zero_ext(FRACTION_SZ, new_bit_count=48, id=43)
  y_fraction: bits[23] = tuple_index(y, index=2, id=46, pos=0,62,21)
  literal.48: bits[48] = literal(value=1, id=48, pos=0,62,74)
  zero_ext.49: bits[48] = zero_ext(FRACTION_SZ, new_bit_count=48, id=49)
  zero_ext.41: bits[48] = zero_ext(x_fraction, new_bit_count=48, id=41)
  shll.44: bits[48] = shll(literal.42, zero_ext.43, id=44, pos=0,61,76)
  zero_ext.47: bits[48] = zero_ext(y_fraction, new_bit_count=48, id=47)
  shll.50: bits[48] = shll(literal.48, zero_ext.49, id=50, pos=0,62,76)
  invoke.52: bits[1] = invoke(x, to_apply=__xls_modules_apfloat_mul_2__is_zero__8_23, id=52, pos=0,65,29)
  x_fraction__1: bits[48] = or(zero_ext.41, shll.44, id=45, pos=0,61,53)
  literal.53: bits[48] = literal(value=0, id=53, pos=0,65,53)
  invoke.55: bits[1] = invoke(y, to_apply=__xls_modules_apfloat_mul_2__is_zero__8_23, id=55, pos=0,66,29)
  y_fraction__1: bits[48] = or(zero_ext.47, shll.50, id=51, pos=0,62,53)
  literal.56: bits[48] = literal(value=0, id=56, pos=0,66,53)
  x_bexp: bits[8] = tuple_index(x, index=1, id=63, pos=0,78,14)
  y_bexp: bits[8] = tuple_index(y, index=1, id=65, pos=0,78,43)
  invoke.59: bits[8] = invoke(to_apply=__std__mask_bits__8, id=59, pos=0,77,27)
  x_fraction__2: bits[48] = sel(invoke.52, cases=[x_fraction__1, literal.53], id=54, pos=0,65,19)
  y_fraction__2: bits[48] = sel(invoke.55, cases=[y_fraction__1, literal.56], id=57, pos=0,66,19)
  zero_ext.64: bits[10] = zero_ext(x_bexp, new_bit_count=10, id=64)
  zero_ext.66: bits[10] = zero_ext(y_bexp, new_bit_count=10, id=66)
  zero_ext.60: bits[10] = zero_ext(invoke.59, new_bit_count=10, id=60)
  literal.61: bits[10] = literal(value=1, id=61, pos=0,77,74)
  fraction: bits[48] = umul(x_fraction__2, y_fraction__2, id=58, pos=0,69,28)
  invoke.69: bits[1] = invoke(x, to_apply=__xls_modules_apfloat_mul_2__is_zero__8_23, id=69, pos=0,87,22)
  invoke.70: bits[1] = invoke(y, to_apply=__xls_modules_apfloat_mul_2__is_zero__8_23, id=70, pos=0,87,36)
  add.67: bits[10] = add(zero_ext.64, zero_ext.66, id=67, pos=0,78,39)
  bias: bits[10] = shra(zero_ext.60, literal.61, id=62, pos=0,77,56)
  bit_slice.74: bits[1] = bit_slice(fraction, start=47, width=1, id=74, pos=0,93,31)
  or.71: bits[1] = or(invoke.69, invoke.70, id=71, pos=0,87,26)
  exp: bits[10] = sub(add.67, bias, id=68, pos=0,78,68)
  literal.72: bits[10] = literal(value=0, id=72, pos=0,87,57)
  fraction_shift: bits[48] = zero_ext(bit_slice.74, new_bit_count=48, id=75)
  bit_slice.76: bits[1] = bit_slice(fraction, start=0, width=1, id=76, pos=0,98,23)
  exp__1: bits[10] = sel(or.71, cases=[exp, literal.72], id=73, pos=0,87,12)
  bit_slice.80: bits[10] = bit_slice(fraction_shift, start=0, width=10, id=80)
  fraction__1: bits[48] = shrl(fraction, fraction_shift, id=78, pos=0,99,26)
  sticky: bits[48] = zero_ext(bit_slice.76, new_bit_count=48, id=77)
  exp__2: bits[10] = add(exp__1, bit_slice.80, id=81, pos=0,103,16)
  literal.84: bits[10] = literal(value=0, id=84, pos=0,114,42)
  fraction__2: bits[48] = or(fraction__1, sticky, id=79, pos=0,100,26)
  literal.86: bits[48] = literal(value=1, id=86, pos=0,114,76)
  sle.85: bits[1] = sle(exp__2, literal.84, id=85, pos=0,114,24)
  shrl.87: bits[48] = shrl(fraction__2, literal.86, id=87, pos=0,114,55)
  bit_slice.82: bits[1] = bit_slice(fraction__2, start=0, width=1, id=82, pos=0,113,23)
  fraction__3: bits[48] = sel(sle.85, cases=[fraction__2, shrl.87], id=88, pos=0,114,17)
  sticky__1: bits[48] = zero_ext(bit_slice.82, new_bit_count=48, id=83)
  fraction__4: bits[48] = or(fraction__3, sticky__1, id=89, pos=0,115,26)
  bit_slice.91: bits[22] = bit_slice(fraction__4, start=0, width=22, id=91, pos=0,127,15)
  literal.92: bits[22] = literal(value=0, id=92, pos=0,127,77)
  zero_ext.103: bits[48] = zero_ext(FRACTION_SZ, new_bit_count=48, id=103)
  bit_slice.96: bits[22] = bit_slice(fraction__4, start=0, width=22, id=96, pos=0,130,15)
  literal.97: bits[22] = literal(value=0, id=97, pos=0,130,77)
  bit_slice.90: bits[1] = bit_slice(fraction__4, start=22, width=1, id=90, pos=0,126,14)
  eq.93: bits[1] = eq(bit_slice.91, literal.92, id=93, pos=0,127,48)
  shrl.104: bits[48] = shrl(fraction__4, zero_ext.103, id=104, pos=0,137,27)
  bit_slice.95: bits[1] = bit_slice(fraction__4, start=22, width=1, id=95, pos=0,129,14)
  ne.98: bits[1] = ne(bit_slice.96, literal.97, id=98, pos=0,130,48)
  is_half_way: bits[1] = and(bit_slice.90, eq.93, id=94, pos=0,126,66)
  bit_slice.100: bits[1] = bit_slice(fraction__4, start=23, width=1, id=100, pos=0,132,54)
  fraction__5: bits[23] = bit_slice(shrl.104, start=0, width=23, id=105)
  greater_than_half_way: bits[1] = and(bit_slice.95, ne.98, id=99, pos=0,129,66)
  and.101: bits[1] = and(is_half_way, bit_slice.100, id=101, pos=0,132,44)
  fraction__6: bits[24] = zero_ext(fraction__5, new_bit_count=24, id=106)
  literal.107: bits[24] = literal(value=1, id=107, pos=0,139,67)
  do_round_up: bits[1] = or(greater_than_half_way, and.101, id=102, pos=0,132,28)
  add.108: bits[24] = add(fraction__6, literal.107, id=108, pos=0,139,43)
  fraction__7: bits[24] = sel(do_round_up, cases=[fraction__6, add.108], id=109, pos=0,139,17)
  literal.111: bits[10] = literal(value=1, id=111, pos=0,143,52)
  bit_slice.110: bits[1] = bit_slice(fraction__7, start=23, width=1, id=110, pos=0,143,23)
  add.112: bits[10] = add(exp__2, literal.111, id=112, pos=0,143,35)
  exp__3: bits[10] = sel(bit_slice.110, cases=[exp__2, add.112], id=113, pos=0,143,12)
  literal.114: bits[10] = literal(value=0, id=114, pos=0,144,43)
  is_subnormal: bits[1] = sle(exp__3, literal.114, id=115, pos=0,144,25)
  result_exp: bits[9] = bit_slice(exp__3, start=0, width=9, id=119)
  literal.121: bits[9] = literal(value=0, id=121, pos=0,153,50)
  high_exp: bits[8] = invoke(to_apply=__std__mask_bits__8, id=125, pos=0,157,31)
  invoke.140: bits[1] = invoke(x, to_apply=__xls_modules_apfloat_mul_2__is_zero__8_23, id=140, pos=0,169,25)
  invoke.141: bits[1] = invoke(y, to_apply=__xls_modules_apfloat_mul_2__is_zero__8_23, id=141, pos=0,169,39)
  invoke.146: bits[1] = invoke(x, to_apply=__apfloat__is_inf__8_23, id=146, pos=0,172,35)
  invoke.147: bits[1] = invoke(y, to_apply=__apfloat__is_inf__8_23, id=147, pos=0,173,21)
  result_exp__1: bits[9] = sel(is_subnormal, cases=[result_exp, literal.121], id=122, pos=0,153,19)
  zero_ext.130: bits[9] = zero_ext(high_exp, new_bit_count=9, id=130)
  zero_ext.126: bits[9] = zero_ext(high_exp, new_bit_count=9, id=126)
  result_fraction: bits[23] = bit_slice(fraction__7, start=0, width=23, id=120)
  literal.123: bits[23] = literal(value=0, id=123, pos=0,154,58)
  invoke.143: bits[1] = invoke(x, to_apply=__apfloat__is_nan__8_23, id=143, pos=0,170,35)
  invoke.144: bits[1] = invoke(y, to_apply=__apfloat__is_nan__8_23, id=144, pos=0,171,21)
  has_0_arg: bits[1] = or(invoke.140, invoke.141, id=142, pos=0,169,29)
  has_inf_arg: bits[1] = or(invoke.146, invoke.147, id=148, pos=0,172,60)
  invoke.134: bits[1] = invoke(x, to_apply=__apfloat__is_inf__8_23, id=134, pos=0,162,38)
  invoke.135: bits[1] = invoke(y, to_apply=__apfloat__is_inf__8_23, id=135, pos=0,163,21)
  ult.131: bits[1] = ult(result_exp__1, zero_ext.130, id=131, pos=0,159,33)
  bit_slice.132: bits[8] = bit_slice(result_exp__1, start=0, width=8, id=132)
  ult.127: bits[1] = ult(result_exp__1, zero_ext.126, id=127, pos=0,158,38)
  literal.128: bits[23] = literal(value=0, id=128, pos=0,158,110)
  result_fraction__1: bits[23] = sel(is_subnormal, cases=[result_fraction, literal.123], id=124, pos=0,154,24)
  bit_slice.153: bits[23] = bit_slice(FRACTION_SZ, start=0, width=23, id=153)
  literal.154: bits[23] = literal(value=1, id=154, pos=0,176,92)
  has_nan_arg: bits[1] = or(invoke.143, invoke.144, id=145, pos=0,170,60)
  and.149: bits[1] = and(has_0_arg, has_inf_arg, id=149, pos=0,174,48)
  x_sign: bits[1] = tuple_index(x, index=0, id=116, pos=0,147,21)
  y_sign: bits[1] = tuple_index(y, index=0, id=117, pos=0,147,31)
  is_operand_inf: bits[1] = or(invoke.134, invoke.135, id=136, pos=0,162,63)
  result_exp__2: bits[8] = sel(ult.131, cases=[high_exp, bit_slice.132], id=133, pos=0,159,19)
  result_fraction__2: bits[23] = sel(ult.127, cases=[literal.128, result_fraction__1], id=129, pos=0,158,24)
  literal.138: bits[23] = literal(value=0, id=138, pos=0,165,60)
  literal.152: bits[23] = literal(value=1, id=152, pos=0,176,37)
  sub.155: bits[23] = sub(bit_slice.153, literal.154, id=155, pos=0,176,74)
  is_result_nan: bits[1] = or(has_nan_arg, and.149, id=150, pos=0,174,34)
  result_sign: bits[1] = ne(x_sign, y_sign, id=118, pos=0,147,27)
  literal.158: bits[1] = literal(value=0, id=158, pos=0,178,42)
  result_exp__3: bits[8] = sel(is_operand_inf, cases=[result_exp__2, high_exp], id=137, pos=0,164,19)
  result_fraction__3: bits[23] = sel(is_operand_inf, cases=[result_fraction__2, literal.138], id=139, pos=0,165,24)
  nan_fraction: bits[23] = shll(literal.152, sub.155, id=156, pos=0,176,39)
  result_sign__1: bits[1] = sel(is_result_nan, cases=[result_sign, literal.158], id=159, pos=0,178,20)
  result_exp__4: bits[8] = sel(is_result_nan, cases=[result_exp__3, high_exp], id=151, pos=0,175,19)
  result_fraction__4: bits[23] = sel(is_result_nan, cases=[result_fraction__3, nan_fraction], id=157, pos=0,177,24)
  EXP_SZ: bits[32] = literal(value=8, id=32, pos=0,50,4)
  WIDE_EXP: bits[32] = literal(value=9, id=34, pos=0,52,4)
  SIGNED_EXP: bits[32] = literal(value=10, id=35, pos=0,53,4)
  ROUNDING_FRACTION: bits[32] = literal(value=24, id=36, pos=0,54,4)
  WIDE_FRACTION: bits[32] = literal(value=48, id=37, pos=0,55,4)
  FRACTION_ROUNDING_BIT: bits[32] = literal(value=22, id=38, pos=0,56,4)
  STICKY_FRACTION: bits[32] = literal(value=24, id=39, pos=0,57,4)
  ret tuple.160: (bits[1], bits[8], bits[23]) = tuple(result_sign__1, result_exp__4, result_fraction__4, id=160, pos=0,180,30)
}

fn __xls_modules_fp32_mul_2__fp32_mul_2(x: (bits[1], bits[8], bits[23]), y: (bits[1], bits[8], bits[23])) -> (bits[1], bits[8], bits[23]) {
  ret invoke.163: (bits[1], bits[8], bits[23]) = invoke(x, y, to_apply=__xls_modules_apfloat_mul_2__apfloat_mul_2__8_22_23_24_10_24_9_48, id=163, pos=0,27,30)
}

fn __f32mul__main(x: (bits[1], bits[8], bits[23]), y: (bits[1], bits[8], bits[23])) -> (bits[1], bits[8], bits[23]) {
  ret invoke.166: (bits[1], bits[8], bits[23]) = invoke(x, y, to_apply=__xls_modules_fp32_mul_2__fp32_mul_2, id=166, pos=0,5,24)
}
