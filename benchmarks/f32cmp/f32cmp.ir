package f32cmp

fn __std__mask_bits__8() -> bits[8] {
  literal.2: bits[8] = literal(value=0, id=2, pos=0,365,11)
  X: bits[32] = literal(value=8, id=1, pos=0,364,17)
  ret not.3: bits[8] = not(literal.2, id=3, pos=0,365,2)
}

fn __apfloat__is_nan__8_23(x: (bits[1], bits[8], bits[23])) -> bits[1] {
  x_bexp: bits[8] = tuple_index(x, index=1, id=7, pos=0,451,4)
  invoke.8: bits[8] = invoke(to_apply=__std__mask_bits__8, id=8, pos=0,451,27)
  x_fraction: bits[23] = tuple_index(x, index=2, id=10, pos=0,451,42)
  literal.11: bits[23] = literal(value=0, id=11, pos=0,451,73)
  eq.9: bits[1] = eq(x_bexp, invoke.8, id=9, pos=0,451,10)
  ne.12: bits[1] = ne(x_fraction, literal.11, id=12, pos=0,451,52)
  EXP_SZ: bits[32] = literal(value=8, id=5, pos=0,450,14)
  FRACTION_SZ: bits[32] = literal(value=23, id=6, pos=0,450,26)
  ret and.13: bits[1] = and(eq.9, ne.12, id=13, pos=0,451,38)
}

fn __apfloat__zero__8_23(sign: bits[1]) -> (bits[1], bits[8], bits[23]) {
  literal.17: bits[8] = literal(value=0, id=17, pos=0,70,23)
  literal.18: bits[23] = literal(value=0, id=18, pos=0,71,32)
  EXP_SZ: bits[32] = literal(value=8, id=15, pos=0,66,12)
  FRACTION_SZ: bits[32] = literal(value=23, id=16, pos=0,66,24)
  ret tuple.19: (bits[1], bits[8], bits[23]) = tuple(sign, literal.17, literal.18, id=19, pos=0,68,30)
}

fn __apfloat__subnormals_to_zero__8_23(x: (bits[1], bits[8], bits[23])) -> (bits[1], bits[8], bits[23]) {
  x_bexp: bits[8] = tuple_index(x, index=1, id=23, pos=0,416,6)
  literal.24: bits[8] = literal(value=0, id=24, pos=0,416,28)
  x_sign: bits[1] = tuple_index(x, index=0, id=26, pos=0,416,59)
  eq.25: bits[1] = eq(x_bexp, literal.24, id=25, pos=0,416,12)
  invoke.27: (bits[1], bits[8], bits[23]) = invoke(x_sign, to_apply=__apfloat__zero__8_23, id=27, pos=0,416,36)
  EXP_SZ: bits[32] = literal(value=8, id=21, pos=0,414,26)
  FRACTION_SZ: bits[32] = literal(value=23, id=22, pos=0,414,38)
  ret sel.28: (bits[1], bits[8], bits[23]) = sel(eq.25, cases=[x, invoke.27], id=28, pos=0,416,2)
}

fn __apfloat__flatten__8_23_32(x: (bits[1], bits[8], bits[23])) -> bits[32] {
  x_sign: bits[1] = tuple_index(x, index=0, id=33, pos=0,223,3)
  x_bexp: bits[8] = tuple_index(x, index=1, id=34, pos=0,223,13)
  concat.35: bits[9] = concat(x_sign, x_bexp, id=35, pos=0,223,9)
  x_fraction: bits[23] = tuple_index(x, index=2, id=36, pos=0,223,23)
  EXP_SZ: bits[32] = literal(value=8, id=30, pos=0,221,15)
  FRACTION_SZ: bits[32] = literal(value=23, id=31, pos=0,221,27)
  TOTAL_SZ: bits[32] = literal(value=32, id=32, pos=0,221,44)
  ret concat.37: bits[32] = concat(concat.35, x_fraction, id=37, pos=0,223,19)
}

fn __apfloat__is_zero_or_subnormal__8_23(x: (bits[1], bits[8], bits[23])) -> bits[1] {
  x_bexp: bits[8] = tuple_index(x, index=1, id=41, pos=0,456,3)
  literal.42: bits[8] = literal(value=0, id=42, pos=0,456,23)
  EXP_SZ: bits[32] = literal(value=8, id=39, pos=0,455,28)
  FRACTION_SZ: bits[32] = literal(value=23, id=40, pos=0,455,41)
  ret eq.43: bits[1] = eq(x_bexp, literal.42, id=43, pos=0,456,9)
}

fn __apfloat__eq_2__8_23(x: (bits[1], bits[8], bits[23]), y: (bits[1], bits[8], bits[23])) -> bits[1] {
  invoke.48: bits[1] = invoke(x, to_apply=__apfloat__is_nan__8_23, id=48, pos=0,598,13)
  invoke.49: bits[1] = invoke(y, to_apply=__apfloat__is_nan__8_23, id=49, pos=0,598,26)
  invoke.52: bits[32] = invoke(x, to_apply=__apfloat__flatten__8_23_32, id=52, pos=0,599,13)
  invoke.53: bits[32] = invoke(y, to_apply=__apfloat__flatten__8_23_32, id=53, pos=0,599,27)
  invoke.55: bits[1] = invoke(x, to_apply=__apfloat__is_zero_or_subnormal__8_23, id=55, pos=0,600,34)
  invoke.56: bits[1] = invoke(y, to_apply=__apfloat__is_zero_or_subnormal__8_23, id=56, pos=0,600,61)
  or.50: bits[1] = or(invoke.48, invoke.49, id=50, pos=0,598,17)
  eq.54: bits[1] = eq(invoke.52, invoke.53, id=54, pos=0,599,17)
  and.57: bits[1] = and(invoke.55, invoke.56, id=57, pos=0,600,38)
  not.51: bits[1] = not(or.50, id=51, pos=0,598,5)
  literal.59: bits[1] = literal(value=0, id=59, pos=0,602,7)
  or.58: bits[1] = or(eq.54, and.57, id=58, pos=0,600,10)
  EXP_SZ: bits[32] = literal(value=8, id=46, pos=0,595,12)
  FRACTION_SZ: bits[32] = literal(value=23, id=47, pos=0,595,25)
  ret sel.60: bits[1] = sel(not.51, cases=[literal.59, or.58], id=60, pos=0,598,2)
}

fn __apfloat__gt_2__8_23(x: (bits[1], bits[8], bits[23]), y: (bits[1], bits[8], bits[23])) -> bits[1] {
  x__1: (bits[1], bits[8], bits[23]) = invoke(x, to_apply=__apfloat__subnormals_to_zero__8_23, id=65, pos=0,662,28)
  y__1: (bits[1], bits[8], bits[23]) = invoke(y, to_apply=__apfloat__subnormals_to_zero__8_23, id=66, pos=0,663,28)
  x__1_sign: bits[1] = tuple_index(x__1, index=0, id=78, pos=0,669,22)
  y__1_sign: bits[1] = tuple_index(y__1, index=0, id=79, pos=0,669,30)
  tuple.80: (bits[1], bits[1]) = tuple(x__1_sign, y__1_sign, id=80, pos=0,669,20)
  literal.102: bits[1] = literal(value=1, id=102, pos=0,675,8)
  tuple_index.101: bits[1] = tuple_index(tuple.80, index=0, id=101)
  literal.92: bits[1] = literal(value=0, id=92, pos=0,673,8)
  tuple_index.91: bits[1] = tuple_index(tuple.80, index=0, id=91)
  literal.83: bits[1] = literal(value=0, id=83, pos=0,671,8)
  tuple_index.82: bits[1] = tuple_index(tuple.80, index=0, id=82)
  x__1_bexp__1: bits[8] = tuple_index(x__1, index=1, id=70, pos=0,666,16)
  y__1_bexp__1: bits[8] = tuple_index(y__1, index=1, id=71, pos=0,666,26)
  x__1_fraction: bits[23] = tuple_index(x__1, index=2, id=73, pos=0,667,21)
  y__1_fraction: bits[23] = tuple_index(y__1, index=2, id=74, pos=0,667,34)
  literal.100: bits[1] = literal(value=1, id=100)
  eq.103: bits[1] = eq(literal.102, tuple_index.101, id=103)
  literal.106: bits[1] = literal(value=0, id=106, pos=0,675,14)
  tuple_index.105: bits[1] = tuple_index(tuple.80, index=1, id=105)
  literal.90: bits[1] = literal(value=1, id=90)
  eq.93: bits[1] = eq(literal.92, tuple_index.91, id=93)
  literal.96: bits[1] = literal(value=1, id=96, pos=0,673,14)
  tuple_index.95: bits[1] = tuple_index(tuple.80, index=1, id=95)
  literal.81: bits[1] = literal(value=1, id=81)
  eq.84: bits[1] = eq(literal.83, tuple_index.82, id=84)
  literal.87: bits[1] = literal(value=0, id=87, pos=0,671,14)
  tuple_index.86: bits[1] = tuple_index(tuple.80, index=1, id=86)
  x__1_bexp: bits[8] = tuple_index(x__1, index=1, id=67, pos=0,665,16)
  y__1_bexp: bits[8] = tuple_index(y__1, index=1, id=68, pos=0,665,25)
  eq_exp: bits[1] = eq(x__1_bexp__1, y__1_bexp__1, id=72, pos=0,666,22)
  gt_fraction: bits[1] = ugt(x__1_fraction, y__1_fraction, id=75, pos=0,667,31)
  and.104: bits[1] = and(literal.100, eq.103, id=104)
  eq.107: bits[1] = eq(literal.106, tuple_index.105, id=107)
  and.94: bits[1] = and(literal.90, eq.93, id=94)
  eq.97: bits[1] = eq(literal.96, tuple_index.95, id=97)
  and.85: bits[1] = and(literal.81, eq.84, id=85)
  eq.88: bits[1] = eq(literal.87, tuple_index.86, id=88)
  gt_exp: bits[1] = ugt(x__1_bexp, y__1_bexp, id=69, pos=0,665,22)
  and.76: bits[1] = and(eq_exp, gt_fraction, id=76, pos=0,668,33)
  and.108: bits[1] = and(and.104, eq.107, id=108)
  and.98: bits[1] = and(and.94, eq.97, id=98)
  and.89: bits[1] = and(and.85, eq.88, id=89)
  abs_gt: bits[1] = or(gt_exp, and.76, id=77, pos=0,668,22)
  invoke.112: bits[1] = invoke(x__1, y__1, to_apply=__apfloat__eq_2__8_23, id=112, pos=0,677,25)
  invoke.118: bits[1] = invoke(x__1, to_apply=__apfloat__is_nan__8_23, id=118, pos=0,681,13)
  invoke.119: bits[1] = invoke(y__1, to_apply=__apfloat__is_nan__8_23, id=119, pos=0,681,26)
  concat.115: bits[3] = concat(and.108, and.98, and.89, id=115)
  not.111: bits[1] = not(abs_gt, id=111, pos=0,677,9)
  not.113: bits[1] = not(invoke.112, id=113, pos=0,677,20)
  or.120: bits[1] = or(invoke.118, invoke.119, id=120, pos=0,681,17)
  one_hot.116: bits[4] = one_hot(concat.115, lsb_prio=true, id=116)
  literal.99: bits[1] = literal(value=1, id=99, pos=0,673,23)
  literal.109: bits[1] = literal(value=0, id=109, pos=0,675,23)
  and.114: bits[1] = and(not.111, not.113, id=114, pos=0,677,17)
  not.121: bits[1] = not(or.120, id=121, pos=0,681,5)
  literal.122: bits[1] = literal(value=0, id=122, pos=0,682,12)
  result: bits[1] = one_hot_sel(one_hot.116, cases=[abs_gt, literal.99, literal.109, and.114], id=117)
  EXP_SZ: bits[32] = literal(value=8, id=63, pos=0,658,12)
  FRACTION_SZ: bits[32] = literal(value=23, id=64, pos=0,658,25)
  literal.110: bits[1] = literal(value=1, id=110, pos=0,677,4)
  ret sel.123: bits[1] = sel(not.121, cases=[literal.122, result], id=123, pos=0,681,2)
}

fn __apfloat__gte_2__8_23(x: (bits[1], bits[8], bits[23]), y: (bits[1], bits[8], bits[23])) -> bits[1] {
  invoke.128: bits[1] = invoke(x, y, to_apply=__apfloat__gt_2__8_23, id=128, pos=0,747,6)
  invoke.129: bits[1] = invoke(x, y, to_apply=__apfloat__eq_2__8_23, id=129, pos=0,747,20)
  EXP_SZ: bits[32] = literal(value=8, id=126, pos=0,744,13)
  FRACTION_SZ: bits[32] = literal(value=23, id=127, pos=0,744,26)
  ret or.130: bits[1] = or(invoke.128, invoke.129, id=130, pos=0,747,13)
}

fn __apfloat__lt_2__8_23(x: (bits[1], bits[8], bits[23]), y: (bits[1], bits[8], bits[23])) -> bits[1] {
  invoke.135: bits[1] = invoke(x, to_apply=__apfloat__is_nan__8_23, id=135, pos=0,878,13)
  invoke.136: bits[1] = invoke(y, to_apply=__apfloat__is_nan__8_23, id=136, pos=0,878,26)
  or.137: bits[1] = or(invoke.135, invoke.136, id=137, pos=0,878,17)
  invoke.139: bits[1] = invoke(x, y, to_apply=__apfloat__gte_2__8_23, id=139, pos=0,878,39)
  not.138: bits[1] = not(or.137, id=138, pos=0,878,5)
  literal.141: bits[1] = literal(value=0, id=141, pos=0,879,12)
  not.140: bits[1] = not(invoke.139, id=140, pos=0,878,33)
  EXP_SZ: bits[32] = literal(value=8, id=133, pos=0,875,12)
  FRACTION_SZ: bits[32] = literal(value=23, id=134, pos=0,875,25)
  ret sel.142: bits[1] = sel(not.138, cases=[literal.141, not.140], id=142, pos=0,878,2)
}

fn __float32__lt_2(x: (bits[1], bits[8], bits[23]), y: (bits[1], bits[8], bits[23])) -> bits[1] {
  ret invoke.145: bits[1] = invoke(x, y, to_apply=__apfloat__lt_2__8_23, id=145, pos=0,68,15)
}

fn __f32cmp__main(x: (bits[1], bits[8], bits[23]), y: (bits[1], bits[8], bits[23])) -> bits[1] {
  ret invoke.148: bits[1] = invoke(x, y, to_apply=__float32__lt_2, id=148, pos=0,4,15)
}
