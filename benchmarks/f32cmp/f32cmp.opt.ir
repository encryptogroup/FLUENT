package f32cmp

fn __f32cmp__main(x: (bits[1], bits[8], bits[23]), y: (bits[1], bits[8], bits[23])) -> bits[1] {
  x_bexp__1: bits[8] = tuple_index(x, index=1, id=806, pos=0,416,6)
  literal.1025: bits[8] = literal(value=0, id=1025, pos=0,416,28)
  y_bexp__1: bits[8] = tuple_index(y, index=1, id=809, pos=0,416,6)
  literal.1024: bits[8] = literal(value=0, id=1024, pos=0,416,28)
  ne.1014: bits[1] = ne(x_bexp__1, literal.1025, id=1014, pos=0,416,2)
  ne.1013: bits[1] = ne(y_bexp__1, literal.1024, id=1013, pos=0,416,2)
  x_fraction__1: bits[23] = tuple_index(x, index=2, id=815, pos=0,416,2)
  sign_ext.999: bits[23] = sign_ext(ne.1014, new_bit_count=23, id=999, pos=0,416,2)
  y_fraction__2: bits[23] = tuple_index(y, index=2, id=820, pos=0,416,2)
  sign_ext.993: bits[23] = sign_ext(ne.1013, new_bit_count=23, id=993, pos=0,416,2)
  literal.831: bits[8] = literal(value=255, id=831, pos=0,451,27)
  literal.805: bits[23] = literal(value=0, id=805, pos=0,71,32)
  literal.1026: bits[8] = literal(value=255, id=1026, pos=0,451,27)
  literal.1022: bits[23] = literal(value=0, id=1022, pos=0,71,32)
  x_sign__1: bits[1] = tuple_index(x, index=0, id=800, pos=0,416,59)
  y_sign__2: bits[1] = tuple_index(y, index=0, id=803, pos=0,416,59)
  x__1_fraction__1: bits[23] = and(x_fraction__1, sign_ext.999, id=1000, pos=0,416,2)
  y__1_fraction__1: bits[23] = and(y_fraction__2, sign_ext.993, id=994, pos=0,416,2)
  literal.810: bits[8] = literal(value=0, id=810, pos=0,416,28)
  literal.1023: bits[8] = literal(value=0, id=1023, pos=0,416,28)
  eq.912: bits[1] = eq(x_bexp__1, literal.831, id=912, pos=0,451,10)
  ne.913: bits[1] = ne(x_fraction__1, literal.805, id=913, pos=0,451,52)
  eq.914: bits[1] = eq(y_bexp__1, literal.1026, id=914, pos=0,451,10)
  ne.915: bits[1] = ne(y_fraction__2, literal.1022, id=915, pos=0,451,52)
  eq.957: bits[1] = eq(x_sign__1, y_sign__2, id=957, pos=0,599,17)
  eq_exp: bits[1] = eq(x_bexp__1, y_bexp__1, id=959, pos=0,599,17)
  eq.962: bits[1] = eq(x__1_fraction__1, y__1_fraction__1, id=962, pos=0,599,17)
  eq.812: bits[1] = eq(x_bexp__1, literal.810, id=812, pos=0,416,12)
  eq.817: bits[1] = eq(y_bexp__1, literal.1023, id=817, pos=0,416,12)
  gt_fraction: bits[1] = ugt(x__1_fraction__1, y__1_fraction__1, id=863, pos=0,667,31)
  and.925: bits[1] = and(eq.912, ne.913, id=925, pos=0,451,38)
  and.926: bits[1] = and(eq.914, ne.915, id=926, pos=0,451,38)
  and.984: bits[1] = and(eq.957, eq_exp, eq.962, id=984, pos=0,599,17)
  and.928: bits[1] = and(eq.812, eq.817, id=928, pos=0,600,38)
  gt_exp: bits[1] = ugt(x_bexp__1, y_bexp__1, id=870, pos=0,665,22)
  and.871: bits[1] = and(eq_exp, gt_fraction, id=871, pos=0,668,33)
  nor.940: bits[1] = nor(and.925, and.926, id=940, pos=0,598,2)
  or.873: bits[1] = or(and.984, and.928, id=873, pos=0,600,10)
  not.869: bits[1] = not(y_sign__2, id=869)
  abs_gt: bits[1] = or(gt_exp, and.871, id=877, pos=0,668,22)
  and.878: bits[1] = and(nor.940, or.873, id=878, pos=0,598,2)
  and.1012: bits[1] = and(x_sign__1, y_sign__2, id=1012)
  nor.875: bits[1] = nor(x_sign__1, not.869, id=875)
  nor.876: bits[1] = nor(x_sign__1, y_sign__2, id=876)
  not.880: bits[1] = not(abs_gt, id=880, pos=0,677,9)
  not.881: bits[1] = not(and.878, id=881, pos=0,677,20)
  concat.1021: bits[3] = concat(and.1012, nor.875, nor.876, id=1021)
  literal.909: bits[1] = literal(value=1, id=909, pos=0,673,23)
  and.911: bits[1] = and(not.880, not.881, id=911, pos=0,677,17)
  eq.978: bits[1] = eq(x_fraction__1, y_fraction__2, id=978, pos=0,599,17)
  result: bits[1] = one_hot_sel(concat.1021, cases=[abs_gt, literal.909, and.911], id=1018)
  and.985: bits[1] = and(eq.957, eq_exp, eq.978, id=985, pos=0,599,17)
  not.939: bits[1] = not(result, id=939, pos=0,681,2)
  or.941: bits[1] = or(and.985, and.928, id=941, pos=0,600,10)
  nor.946: bits[1] = nor(and.925, and.926, not.939, id=946, pos=0,681,2)
  and.947: bits[1] = and(nor.940, or.941, id=947, pos=0,598,2)
  or.950: bits[1] = or(nor.946, and.947, id=950, pos=0,747,13)
  ret nor.951: bits[1] = nor(and.925, and.926, or.950, id=951, pos=0,878,2)
}
